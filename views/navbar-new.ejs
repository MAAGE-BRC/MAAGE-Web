<div data-dojo-type="dijit/layout/ContentPane" class="HeaderBar maage-navbar" data-dojo-props="region:'top'">
    <div id="bv-brc-header" class="P3Header" role="heading" aria-level="1">
        <div>
            <div id="maage-navbar">
                <!-- Navbar -->
                <div class="navbar">
                    <div class="navbar-left">
                        <div class="logo">
                            <img src="/patric/images/maage/maage-logo.png" alt="MAAGE Logo" style="width: 45px; height: auto; margin-right: 10px;" />
                            <span class="font-poppins font-semibold text-[40px] text-[var(--maage-secondary-500)]">MA</span>
                            <span class="font-poppins font-light text-[40px] ml-[-2px] text-[var(--maage-secondary-700)]">AGE</span>
                            <span class="text-[10px] ml-[4px] mt-[18px] logo-version"><i class="text-[10px]">v.<%- request.package.version %><%- request.applicationOptions.appLabel || " " %></i></span>
                        </div>
                    </div>
                    <div class="nav-items" id="nav-items">
                        <div class="nav-item">
                            <a href="#">Organisms <i class="fas fa-chevron-down dropdown-icon"></i></a>
                                    <div class="dropdown-content">
                                        <div class="dropdown-section">
                                            <h3>Bacteria</h3>
                                            <a href="/view/Taxonomy/194#view_tab=overview">Campylobacter</a>
                                            <a href="/view/Taxonomy/1637#view_tab=overview">Listeria</a>
                                            <a href="/view/Taxonomy/561#view_tab=overview">Escherichia</a>
                                            <a href="/view/Taxonomy/590#view_tab=overview">Salmonella</a>
                                            <a href="#">All Bacteria</a>
                                        </div>
                                        <div class="dropdown-section">
                                            <h3>Viruses</h3>
                                            <a href="/view/Taxonomy/11320#view_tab=overview">Influenza A virus</a>
                                            <a href="/view/Taxonomy/2697049#view_tab=overview">SARS-CoV-2</a>
                                            <a href="/view/Taxonomy/10244#view_tab=overview">Monkeypox virus</a>
                                            <a href="#">All Viruses</a>
                                        </div>
                                        <div class="dropdown-section">
                                            <h3>Metagenomes</h3>
                                            <a href="/view/Taxonomy/1637#view_tab=overview">SARS-CoV-2 Wastewater</a>
                                            <a href="#">H5N1 Wastewater</a>
                                            <a href="#">All Metagenomes</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-item">
                                    <a href="#">Searches <i class="fas fa-chevron-down dropdown-icon"></i></a>
                                    <div class="dropdown-content">
                                        <div class="dropdown-section">
                                            <h3>Advanced Search</h3>
                                            <a href="/searches/TaxaSearch">Taxa</a>
                                            <a href="/searches/GenomeSearch">Genomes</a>
                                            <a href="/searches/FeatureSearch">Features</a>
                                            <a href="/searches/ProteinSearch">Proteins</a>
                                            <a href="/searches/SpecialtyGeneSearch">Specialty Genes</a>
                                            <a href="/searches/PathwaySearch">Pathways</a>
                                            <a href="/searches/SubsystemSearch">Subsystems</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-item">
                                    <a href="#">Tools <i class="fas fa-chevron-down dropdown-icon"></i></a>
                                    <div class="dropdown-content two-columns">
                                        <div class="dropdown-column" style="flex: 1; min-width: 280px;">
                                            <div class="dropdown-section">
                                                <h3>Genomics</h3>
                                                <a href="/app/Assembly2">Genome Assembly</a>
                                                <a href="/app/Annotation">Genome Annotation</a>
                                                <a href="/app/ComprehensiveGenomeAnalysis">Comprehensive Genome Analysis (B)</a>
                                                <a href="/app/Homology">BLAST</a>
                                                <a href="/app/GenomeDistance">Similar Genome Finder</a>
                                            </div>
                                            <div class="dropdown-section">
                                                <h3>Phylogenomics</h3>
                                                <a href="/app/PhylogeneticTree">Bacterial Genome Tree</a>
                                                <a href="/app/ViralGenomeTree">Viral Genome Tree</a>
                                                <a href="/app/GeneTree">Gene Protein Tree</a>
                                            </div>
                                            <div class="dropdown-section">
                                                <h3>Protein Tools</h3>
                                                <a href="/app/MSA">MSA and SNP Analysis</a>
                                                <a href="/app/SeqComparison">Proteome Comparison</a>
                                                <a href="/app/ComparativeSystems">Comparative Systems</a>
                                            </div>
                                        </div>
                                        <div class="dropdown-column" style="flex: 1; min-width: 280px;">
                                            <div class="dropdown-section">
                                                <h3>Metagenomics</h3>
                                                <a href="/app/TaxonomicClassification">Taxonomic Classification</a>
                                                <a href="/app/MetagenomicBinning">Metagenomic Binning</a>
                                                <a href="/app/MetagenomicReadMapping">Metagenomic Read Mapping</a>
                                            </div>
                                            <div class="dropdown-section">
                                                <h3>Viral Tools</h3>
                                                <a href="/app/ComprehensiveSARS2Analysis">SARS-COV-2 Genome Analysis</a>
                                                <a href="/app/SARS2Wastewater">SARS-CoV-2 Wastewater Analysis</a>
                                                <a href="/app/SubspeciesClassification">Subspecies Classification</a>
                                            </div>
                                            <div class="dropdown-section">
                                                <h3>Outbreak Tracker</h3>
                                                <a href="/outbreaks/Mpox/#view_tab=overview">Monkeypox virus</a>
                                                <a href="/outbreaks/H5N1/#view_tab=overview">Influenza A/H5N1</a>
                                                <a href="/outbreaks/SARSCoV2/#view_tab=overview">SARS-COV-2</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-item">
                                    <a href="#">Workspaces <i class="fas fa-chevron-down dropdown-icon"></i></a>
                                    <div class="dropdown-content">
                                        <div class="dropdown-section">

                                            <a href="/workspace/public">Public Workspaces</a>

                                            <a href="/workspace/">My Workspaces</a>
                                            <a href="/job/">My Jobs</a>
                                            <a href="/view/GenomeList/?eq(public,false)">My Genomes</a>
                                            <a href="/">My BioProjects</a>
                                            <hr>
                                            <a href="/workspace/public">Public Workspaces</a>
                                            <a href="/workspace/public/maage@bvbrc/MAAGE%20Workshop">MAAGE Workshop</a>
                                        </div>
                                    </div>
                                </div>
                                <div class="nav-item">
                                    <a href="#">About <i class="fas fa-chevron-down dropdown-icon"></i></a>
                                    <div class="dropdown-content">
                                        <div class="dropdown-section">
                                            <h3>MAAGE</h3>
                                            <a href="/about">About Us</a>
                                            <a href="/team">Team Members</a>
                                            <a href="/advisory-boards">Advisory Boards</a>
                                            <a href="mailto:help@maage-brc.org">Contact MAAGE</a>
                                        </div>
                                    </div>
                                </div>
                        </div>


                    <div class="navbar-right">
                        <button class="search-icon">
                            <i class="fas fa-search"></i>
                        </button>

                        <a href="#" class="login-btn">Login</a>
                        <a href="#" class="register-btn">Register</a>


                        <button id="mobile-menu-toggle" class="mobile-menu-toggle">
                            <i class="fas fa-bars"></i>
                        </button>
                    </div>
                </div>

                <div id="search-flyout" class="search-flyout">
                    <div class="search-container">
                        <i class="fas fa-search"></i>
                        <input type="text" placeholder="Search organisms, genomes, pathways..." autofocus>
                        <button class="search-close"><i class="fas fa-times"></i></button>
                    </div>
                </div>
            </div>



































        </div><!-- bv-brc-header-container -->
    </div><!-- bv-brc-header -->
</div><!-- HeaderBar -->
<style>
:root {
  --primary-color: #a6c9b8;
  --primary-50: #f2f8f5;
  --primary-100: #deede4;
  --primary-200: #bfd9cb;
  --primary-300: #a6c9b8;
  --primary-400: #89b8a3;
  --primary-500: #65a48a;
  --primary-600: #488970;
  --primary-700: #3e7561;
  --primary-800: #376755;
  --primary-900: #305a4c;
  --primary-950: #24423a;

  --secondary-color: #548fa6;
  --secondary-50: #f1f7f9;
  --secondary-100: #dceaef;
  --secondary-200: #c2d9e0;
  --secondary-300: #a0c3cf;
  --secondary-400: #71a3b7;
  --secondary-500: #548fa6;
  --secondary-600: #447188;
  --secondary-700: #406477;
  --secondary-800: #395160;
  --secondary-900: #314654;
  --secondary-950: #24333d;

  --maage-primary-50: #f2f8f5;
  --maage-primary-100: #deede4;
  --maage-primary-200: #bfd9cb;
  --maage-primary-300: #a6c9b8;
  --maage-primary-400: #89b8a3;
  --maage-primary-500: #65a48a;
  --maage-primary-600: #488970;
  --maage-primary-700: #3e7561;
  --maage-primary-800: #376755;
  --maage-primary-900: #305a4c;
  --maage-primary-950: #24423a;

  --maage-secondary-50: #f1f7f9;
  --maage-secondary-100: #dceaef;
  --maage-secondary-200: #c2d9e0;
  --maage-secondary-300: #a0c3cf;
  --maage-secondary-400: #71a3b7;
  --maage-secondary-500: #548fa6;
  --maage-secondary-600: #447188;
  --maage-secondary-700: #406477;
  --maage-secondary-800: #395160;
  --maage-secondary-900: #314654;
  --maage-secondary-950: #24333d;

  --maage-tertiary-50: #f9f9fb;
  --maage-tertiary-100: #f1f1f6;
  --maage-tertiary-200: #e6e5ef;
  --maage-tertiary-300: #d2d0e2;
  --maage-tertiary-400: #b4b0cf;
  --maage-tertiary-500: #a19ac1;
  --maage-tertiary-600: #897daa;
  --maage-tertiary-700: #766a95;
  --maage-tertiary-800: #675d83;
  --maage-tertiary-900: #574e6e;
  --maage-tertiary-950: #3b364e;

  --maage-gray-50: #f6f6f6;
  --maage-gray-100: #ededed;
  --maage-gray-200: #dbdbdb;
  --maage-gray-300: #c9c9c9;
  --maage-gray-400: #adadad;
  --maage-gray-500: #8f8f8f;
  --maage-gray-600: #757575;
  --maage-gray-700: #595959;
  --maage-gray-800: #454545;
  --maage-gray-900: #333333;
  --maage-gray-950: #262626;

  --dove-gray-50: #f6f6f6;
  --dove-gray-100: #e7e7e7;
  --dove-gray-200: #dedede;
  --dove-gray-300: #b0b0b0;
  --dove-gray-400: #888888;
  --dove-gray-500: #737373;
  --dove-gray-600: #5d5d5d;
  --dove-gray-700: #4f4f4f;
  --dove-gray-800: #454545;
  --dove-gray-900: #3d3d3d;
  --dove-gray-950: #262626;


  --accent-color: #8279a1;
  --success-color: #2ecc71;
  --warning-color: #f39c12;
  --light-color: #ecf0f1;
  --dark-color: #2c3e50;
  --text-color: #2c2c2c;
  --text-color-alt: #7f8c8d;
  --text-color-dark-mode: #ecf0f1;
  --text-color-dark-mode-alt: #bdc3c7;
  --heading-color: #2c2c2c;
  --heading-color-alt: #7f8c8d;
  --heading-color-dark-mode: #ecf0f1;
  --heading-color-dark-mode-alt: #bdc3c7;
  --text-light: #7f8c8d;
  --background-color: #F8F6F4;
  --bg-ui-color: #F8F6F4;
  --card-color: #fafafa;
  --viz-placeholder: #e7e7e7;
  --sidebar-width: 240px;
  --header-height: 60px;
  --border-radius: 8px;
  --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  --ma-color: #477e93;
  --age-color: #375767;
  --viz-bg: #fafafa;
}

[data-theme="dark"] {
  --primary-color: #3d677d;
  --secondary-color: #305a6a;
  --accent-color: #6e6b8a;
  --success-color: #27ae60;
  --warning-color: #e67e22;
  --light-color: #2c3e50;
  --dark-color: #ecf0f1;
  --text-color: #ecf0f1;
  --text-light: #bdc3c7;
  --background-color: #2e3f4b;
  --card-color: #2c3e50;
  --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
  --ma-color: #5b9eb8;
  --age-color: #7c91a3;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  transition: color 0.5s, background-color 0.5s;
}

body, .card-color, .navbar, .sidebar, .stat-card, .outbreak-card, .disease-stat-card,
.disease-chart-wrapper, .prediction-chart-card, .metric-card, .dataset-card {
  transition: background-color 0.5s, color 0.5s, border-color 0.5s, box-shadow 0.5s;
}

.stat-card:hover, .outbreak-card:hover, .dataset-card:hover {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  transform: translateY(-5px);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

body {
  font-family: 'Inter', sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  line-height: 1.6;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Poppins', sans-serif;
}

/* Dashboard Layout */
.dashboard {
  min-height: 100vh;
}

/* Navbar */
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: var(--header-height);
  background: var(--primary-color);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15), 0 2px 4px rgba(0, 0, 0, 0.08);
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 20px;
  z-index: 20;
  transition: all 0.3s ease;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(5px);
}

.navbar-left {
  display: flex;
  align-items: center;
}

.logo img {
  min-width: 32px;
  height: auto;
  transition: all 0.3s ease;
}

.nav-items {
  display: flex;
  gap: 20px;
  margin-left: 30px;
}

.nav-item {
  position: relative;
  padding: 0 15px;
}

.mobile-menu-toggle {
  display: none;
  background: none;
  border: none;
  color: var(--secondary-800);
  font-size: 24px;
  cursor: pointer;
  padding: 5px;
  transition: transform 0.3s ease;
}

.mobile-menu-toggle:hover {
  transform: scale(1.1);
}

.nav-item > a {
  color: var(--secondary-800);
  font-family: 'Poppins', sans-serif;
  font-size: 16px;
  font-weight: 500;
  padding: 8px 0;
  display: block;
  text-decoration: none;
  transition: all 0.3s ease;
  position: relative;
}

.nav-item > a:hover {
  color: var(--secondary-900);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.nav-item > a:after {
  content: '';
  position: absolute;
  width: 0;
  height: 2px;
  bottom: 0;
  left: 0;
  background-color: var(--secondary-700);
  transition: width 0.3s ease;
}

.nav-item > a:hover:after {
  width: 100%;
}

.dropdown-content {
  position: absolute;
  top: 100%;
  left: 0;
  background-color: white;
  min-width: 200px;
  box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  border-radius: 4px;
  padding: 10px;
  display: none;
  z-index: 30;
}

.dropdown-content.two-columns {
  display: none;
  flex-direction: row !important; /* Force row layout */
  min-width: 600px;
  left: -150px;
  width: auto;
}

.dropdown-column {
  flex: 1;
  padding: 0 10px;
  display: flex;
  flex-direction: column;
  width: 50%; /* Ensure each column takes up half the width */
  box-sizing: border-box;
}

.nav-item .dropdown-content.two-columns.show {
  display: flex !important; /* Force flex display when visible */
}

.nav-item .dropdown-content.show {
  display: flex;
  flex-direction: column;
}

.nav-item > a {
  display: flex;
  align-items: center;
}

.nav-item > a .dropdown-icon {
  margin-left: 5px;
  transition: transform 0.3s ease;
}

.nav-item.active > a .dropdown-icon {
  transform: rotate(180deg);
}

.dropdown-section {
  margin-bottom: 10px;
}

.dropdown-section h3 {
  font-size: 14px;
  color: var(--secondary-color);
  margin-bottom: 5px;
  padding-bottom: 5px;
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

.dropdown-section a {
  display: block;
  padding: 5px 0;
  color: var(--text-color);
  font-size: 14px;
  text-decoration: none;
  transition: color 0.3s ease;
}

.dropdown-section a:hover {
  color: var(--secondary-color);
}

.navbar-right {
  display: flex;
  align-items: center;
  gap: 15px;
}

.search-icon, .dark-mode-toggle {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 18px;
  color: var(--dark-color);
  margin-right: 10px;
  transition: transform 0.2s ease;
}

.search-icon:hover {
  transform: scale(1.1);
}

.search-flyout {
  background-color: #fafafa;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  position: fixed;
  top: var(--header-height);
  left: 0;
  right: 0;
  z-index: 100;
  padding: 20px 0;
  display: none;
  transform: translateY(-10px);
  opacity: 0;
  pointer-events: none;
}

.search-flyout.active {
  display: block;
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto;
}

.search-container {
  max-width: 800px;
  margin: 0 auto;
  position: relative;
  padding: 0 20px;
}

.search-container i.fa-search {
  position: absolute;
  left: 35px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-light);
  font-size: 18px;
}

.search-container input {
  color: var(--text-color);
  background-color: #fafafa;
  border: 1px solid var(--light-color);
  border-radius: var(--border-radius);
  padding: 12px 15px 12px 45px;
  font-size: 16px;
  width: 100%;
  box-sizing: border-box;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.search-container .search-close {
  position: absolute;
  right: 35px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--text-light);
  cursor: pointer;
  font-size: 18px;
}

.search-container .search-close:hover {
  color: var(--text-color);
}

.search-container input:focus {
  outline: none;
  border-color: var(--secondary-color);
  box-shadow: 0 0 0 2px rgba(61, 103, 125, 0.2);
}

.search-message {
  position: fixed;
  top: 80px;
  left: 50%;
  transform: translateX(-50%) translateY(-20px);
  background-color: var(--card-color);
  color: var(--text-color);
  padding: 12px 24px;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 110;
  opacity: 0;
  transition: all 0.3s ease;
}

.search-message.show {
  opacity: 1;
  transform: translateX(-50%) translateY(0);
}

.sidebar-dark-mode-toggle {
  background: none;
  border: none;
  cursor: pointer;
  color: #fff;
  font-size: 18px;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  padding: 12px 0;
  margin-top: auto;
  transition: all 0.3s ease;
}

.sidebar-dark-mode-toggle:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

[data-theme="dark"] .sidebar-dark-mode-toggle i.fa-moon {
  color: #f1c40f;
}

[data-theme="dark"] .fa-moon:before {
  content: "\f185"; /* Change to sun icon when in dark mode */
}

.login-btn, .register-btn {
  text-decoration: none;
  padding: 8px 32px;
  border-radius: 6px;
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.login-btn::before, .register-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.7s ease;
}

.login-btn:hover::before, .register-btn:hover::before {
  left: 100%;
}

.login-btn {
  background-color: var(--bg-ui-color);
  color: #262626;
  border: 1px solid rgba(0, 0, 0, 0.05);
}

.login-btn:hover {
  color: #fafafa;
  background-color: #477e93;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.register-btn {
  color: #fafafa;
  background-color: var(--secondary-color);
}

.register-btn:hover {
  background-color: #477e93;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Sidebar */
.sidebar {
  width: 64px;
  background-color: var(--secondary-color);
  color: #fff;
  display: flex;
  flex-direction: column;
  position: fixed;
  top: 50%;
  left: 20px;
  transform: translateY(-50%);
  height: auto;
  max-height: 80vh;
  z-index: 10;
  border-radius: 12px;
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
}

.logo {
  display: flex;
  align-items: center;
  padding: 10px 0;
  margin-right: 20px;
  transition: transform 0.3s ease;
}

.logo:hover {
  transform: scale(1.05);
}

.logo i {
  font-size: 12px;
  font-style: normal;
  margin-right: 10px;
  color: var(--secondary-color);
  filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.1));
}

.logo h1 {
  font-size: 20px;
  font-weight: 600;
  color: var(--dark-color);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
}

.sidebar-header {
  padding: 20px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.menu {
  flex: 1;
  padding: 20px 0;
  overflow-y: auto;
  max-height: 60vh;
}

.menu-item {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 14px 0;
  cursor: pointer;
  transition: all 0.3s ease;
}

.menu-item:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.menu-item.active {
  background-color: rgba(255, 255, 255, 0.2);
  border-left: 3px solid var(--secondary-color);
}

.menu-item i {
  font-size: 20px;
  width: 24px;
  text-align: center;
}

.menu-item span {
  display: none;
}

.menu-bottom {
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  margin-top: auto;
  width: 100%;
  display: flex;
  justify-content: center;
}

/* Content Area */
.content {
  margin-left: 84px; /* 64px sidebar width + 20px padding */
  margin-top: var(--header-height);
  padding: 20px;
}

.platform-header {
  padding-top: 5px;
  padding-bottom: 5px;

}

.platform-header h1 {
  font-family: 'Poppins', sans-serif;
  font-weight: 600;
  color: var(--secondary-700);
}


.search-bar {
  display: flex;
  align-items: center;
  background-color: var(--background-color);
  border-radius: 20px;
  padding: 8px 15px;
  width: 300px;
}

.search-bar i {
  color: var(--text-light);
  margin-right: 10px;
}

.search-bar input {
  border: none;
  background: transparent;
  outline: none;
  color: var(--text-color);
  width: 100%;
  font-size: 14px;
}

.header-actions {
  display: flex;
  align-items: center;
}

.btn-notifications {
  background: none;
  border: none;
  color: var(--text-light);
  font-size: 18px;
  cursor: pointer;
  margin-right: 20px;
  position: relative;
}

.btn-notifications::after {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  width: 8px;
  height: 8px;
  background-color: var(--accent-color);
  border-radius: 50%;
}

.user-profile {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.user-profile img {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  margin-right: 10px;
}

/* Section Styling */
.section {
  padding: 20px;
  display: none;
}

.section.active {
  display: block;
}

.section h2 {
  margin-bottom: 10px;
}

.section .section-title {

}

/* Risk Matrix Styles */
.risk-matrix-grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(5, 1fr);
  gap: 2px;
  height: 180px;
  width: 180px;
  margin: 0 auto;
}

.risk-cell {
  position: relative;
  border-radius: 2px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.disease-marker {
  position: absolute;
  width: 20px;
  height: 20px;
  background-color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 10px;
  font-weight: bold;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
  z-index: 5;
}

.risk-axis-container {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.risk-x-axis {
  display: flex;
  justify-content: space-between;
  width: 180px;
  margin: 5px auto;
  font-size: 12px;
  color: var(--text-light);
}

.risk-y-axis {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 180px;
  margin-left: 10px;
  font-size: 12px;
  color: var(--text-light);
}

.risk-legend {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  margin-top: 15px;
  gap: 10px;
}

.legend-item {
  display: flex;
  align-items: center;
  margin-right: 10px;
  font-size: 12px;
}

.legend-color {
  width: 12px;
  height: 12px;
  border-radius: 2px;
  margin-right: 5px;
}

/* Prediction Map Styles */
.prediction-map {
  position: relative;
  overflow: hidden;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
}

.hotspot-pulse {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    r: 5;
    opacity: 0.7;
  }
  50% {
    r: 12;
    opacity: 0.4;
  }
  100% {
    r: 5;
    opacity: 0.7;
  }
}

.prediction-tooltip {
  transition: opacity 0.3s ease;
  z-index: 1000;
}

/* Responsive adjustments for the prediction section */
@media (max-width: 768px) {
  .prediction-charts {
    grid-template-columns: 1fr;
  }

  .prediction-metrics {
    grid-template-columns: repeat(2, 1fr);
  }

  .risk-matrix-grid {
    height: 150px;
    width: 150px;
  }

  .risk-x-axis, .risk-y-axis {
    width: 150px;
    height: 150px;
  }
}

  color: var(--dark-color);
  font-weight: 600;
  font-family: 'Poppins', sans-serif;
}

.section-description {
  color: #3c3c3c;
  margin-bottom: 12px;
  font-size: 16px;
  font-family: 'Inter', sans-serif;
}

.section-disclaimer {
  font-family: 'Inter', sans-serif;
  color: #7c7c7c;
  font-size: 15px;
  font-style: italic;
}

.disclaimer-container {
  background-color: var(--background-color);
  border-radius: var(--border-radius);
  padding: 15px;
  border-left: 3px solid var(--secondary-color);
  margin-top: 10px;
  transition: opacity 0.3s ease;
  max-width: 800px;
}

.disclaimer-container.hidden {
  display: none !important;
}

.disclaimer-container:not(.hidden) {
  display: block;
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.disclaimer-toggle {
  background: none;
  border: none;
  color: var(--secondary-color);
  margin-left: 8px;
  cursor: pointer;
  font-size: 16px;
  vertical-align: middle;
  transition: transform 0.3s ease;
}

.disclaimer-toggle:hover {
  transform: scale(1.2);
}

/* Stats Cards */
.stats-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 15px;
  margin-bottom: 15px;
}

.stat-card {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 20px;
  box-shadow: var(--box-shadow);
}

.stat-card h3 {
  font-size: 16px;
  color: #6c6c6c;
  margin-bottom: 10px;
  font-family: 'Poppins', sans-serif;
  font-weight: 600;
}

.stat-value {
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 10px;
  color: #2c2c2c;
}

.stat-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-family: 'Inter', sans-serif;
  font-weight: 400;
  font-size: 14px;
}

.stat-label {
  color: var(--text-light);
}

.stat-change {
  padding: 2px 6px;
  border-radius: 10px;
  font-weight: 500;
}

.stat-change.increase {
  color: var(--success-color);
}

.stat-change.decrease {
  color: var(--accent-color);
}

/* Map Container */
.map-container {
  background-color: transparent;
  border-radius: var(--border-radius);
  margin-bottom: 30px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.map-container h2 {
  margin-bottom: 5px;
  font-size: 20px;
  font-family: 'Poppins', sans-serif;
  font-weight: 600;
  color: var(--text-color);
}

.global-stats-title {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 12px;
  color: var(--secondary-700);
  font-family: 'Poppins', sans-serif;
}

.dashboard-overview-section {
  width: 100%;
  margin-bottom: 5px;
}

/* Global Stats Overview with Map Stats */
.global-stats-overview {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 12px;
  width: 100%;
  margin-bottom: 16px;
}

@media (max-width: 768px) {
  .global-stats-overview {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 576px) {
  .global-stats-overview {
    grid-template-columns: 1fr;
  }
}

/* Global Stats Container Styles */
.global-stats-container {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 16px;
  box-shadow: var(--box-shadow);
  margin-bottom: 16px;
}

.global-stats-title {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 12px;
  color: var(--secondary-700);
  font-family: 'Poppins', sans-serif;
}

.global-stats-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
}

.global-stat-panel {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

.global-stat-panel:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.global-stat-header {
  padding: 10px 12px;
  background-color: var(--primary-100);
  border-bottom: 2px solid var(--primary-300);
}

.global-stat-header h4 {
  font-size: 15px;
  font-weight: 600;
  color: var(--secondary-700);
  margin: 0;
  font-family: 'Poppins', sans-serif;
}

.global-stat-content {
  padding: 12px;
}

.global-stat-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 8px;
  font-family: 'Inter', sans-serif;
}

.global-stat-item:last-child {
  margin-bottom: 0;
}

.global-stat-label {
  font-size: 13px;
  color: var(--text-light);
}

.global-stat-value {
  font-size: 13px;
  font-weight: 600;
  color: var(--secondary-700);
}

.global-stat-alerts {
  padding: 12px;
}

.global-alert-item {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
  padding: 6px 8px;
  border-radius: 4px;
  background-color: var(--card-color);
  border-left: 3px solid var(--light-color);
}

.global-alert-item:last-child {
  margin-bottom: 0;
}

.alert-badge {
  font-size: 11px;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 10px;
  margin-right: 8px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.alert-badge.high {
  background-color: rgba(231, 76, 60, 0.15);
  color: #e74c3c;
}

.alert-badge.moderate {
  background-color: rgba(243, 156, 18, 0.15);
  color: var(--warning-color);
}

.alert-badge.low {
  background-color: rgba(46, 204, 113, 0.15);
  color: var(--success-color);
}

.alert-text {
  font-size: 12px;
  color: var(--text-color);
  flex: 1;
  text-align: right;
}

@media (max-width: 1200px) {
  .global-stats-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .global-stats-grid {
    grid-template-columns: 1fr;
  }
}

.map-unified-container {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 16px;
  box-shadow: var(--box-shadow);
  margin-bottom: 10px;
}

.map-unified-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.map-unified-header h3 {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 12px;
  color: var(--secondary-700);
  font-family: 'Poppins', sans-serif;
}

.map-controls {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 10px 15px;
  margin-bottom: 10px;
}

.map-diseases-selector {
  display: flex;
  flex-direction: column;
  width: 100%;
  font-size: 14px;

}

.disease-selection-title {
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--text-color);
  font-size: 14px;
}

.map-visualization-container {
  width: 100%;
}

#world-map {
  height: 500px;
  position: relative;
  overflow: hidden;
  background-color: var(--maage-gray-200);
  border-radius: var(--border-radius);
  border: 1px solid var(--maage-gray-500);
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
}

@media (min-width: 768px) {
  .map-diseases-selector {
    flex-direction: row;
    align-items: center;
  }

  .disease-selection-title {
    margin-right: 15px;
    margin-bottom: 0;
    text-align: left;
  }
}

.disease-checkboxes {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  justify-content: flex-start;
  width: 100%;
}

.disease-checkbox-item {
  display: flex;
  align-items: center;
  gap: 6px;
  background-color: var(--card-color);
  padding: 8px 16px;
  border-radius: 16px;
  transition: all 0.2s ease;
  white-space: nowrap;
  border: 1px solid rgba(0, 0, 0, 0.2);
}

.disease-checkbox-item:hover {
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.disease-checkbox-item input {
  margin: 0;
  width: 14px;
  height: 14px;
}

.disease-checkbox-item label {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-weight: 500;
  font-size: 12px;
}

.disease-color-indicator {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 5px;
  display: inline-block;
}

/* Map tooltip */
.map-tooltip {
  background-color: var(--card-color) !important;
  color: var(--text-color) !important;
  z-index: 1000;
}

/* Map styling */
.country {
  transition: fill 0.2s ease;
}

.country:hover {
  fill: #e6e6e6;
}

.disease-circle {
  transition: r 0.2s ease, fill-opacity 0.2s ease;
  cursor: pointer;
}

/* Outbreak Summary Section */
.outbreak-summary-container {
  margin-top: 10px;
}

.outbreak-section-title {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 12px;
  color: var(--secondary-700);
  font-family: 'Poppins', sans-serif;
}

.outbreak-cards {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 14px;
}

.outbreak-card {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 18px;
  box-shadow: var(--box-shadow);
  transition: all 0.3s ease;
  border-top: 4px solid var(--secondary-color);
  display: flex;
  flex-direction: column;
}

.outbreak-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
}

.outbreak-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.outbreak-header h4 {
  font-size: 16px;
  font-weight: 600;
  font-family: 'Poppins', sans-serif;
  color: var(--secondary-700);
}

.severity {
  font-size: 11px;
  padding: 3px 10px;
  border-radius: 15px;
  font-weight: 600;
  letter-spacing: 0.2px;
  text-transform: uppercase;
}

.severity.low {
  background-color: rgba(46, 204, 113, 0.15);
  color: var(--success-color);
  border: 1px solid rgba(46, 204, 113, 0.3);
}

.severity.moderate {
  background-color: rgba(243, 156, 18, 0.15);
  color: var(--warning-color);
  border: 1px solid rgba(243, 156, 18, 0.3);
}

.severity.high {
  background-color: rgba(231, 76, 60, 0.15);
  color: #e74c3c;
  border: 1px solid rgba(231, 76, 60, 0.3);
}

.severity.critical {
  background-color: rgba(192, 57, 43, 0.15);
  color: #c0392b;
  border: 1px solid rgba(192, 57, 43, 0.3);
}

.outbreak-stats {
  display: flex;
  justify-content: space-between;
  margin-bottom: 18px;
  padding: 10px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
}

.outbreak-stat {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.outbreak-stat .stat-label {
  font-size: 12px;
  color: var(--text-light);
  font-weight: 500;
}

.outbreak-stat .stat-value {
  font-size: 18px;
  font-weight: 600;
  margin: 5px 0 0;
  color: var(--secondary-700);
}

.outbreak-chart {
  height: 120px;
  margin-bottom: 15px;
}

.btn-details {
  width: 100%;
  padding: 10px;
  background-color: var(--secondary-color);
  color: white;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
  margin-top: auto;
  display: flex;
  justify-content: center;
  align-items: center;
}

.btn-details:hover {
  background-color: var(--secondary-600);
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.btn-details:active {
  transform: translateY(0);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Media Queries */
@media (max-width: 1200px) {
  .map-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  .outbreak-cards {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .outbreak-cards {
    grid-template-columns: 1fr;
  }

  .map-stats {
    grid-template-columns: 1fr;
  }

  #world-map {
    height: 350px;
  }

  .map-container {
    padding: 15px;
  }
}

/* Disease Details Section */
.disease-selector {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: 20px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 10px;
  box-shadow: var(--box-shadow);
}

.disease-btn {
  padding: 8px 15px;
  margin: 5px;
  background: none;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s;
  color: var(--text-light);
}

.disease-btn.active {
  background-color: var(--secondary-color);
  color: white;
}

.disease-details {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 20px;
  box-shadow: var(--box-shadow);
}

.disease-overview {
  margin-bottom: 20px;
}

.disease-overview h3 {
  margin-bottom: 15px;
  font-size: 18px;
  font-family: 'Poppins', sans-serif;
}

.disease-data-container {
  display: flex;
  gap: 20px;
}

.disease-info-container,
.disease-alerts {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 15px;
  margin-top: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.disease-description {
  line-height: 1.6;
  margin-bottom: 15px;
}

.metadata-item {
  margin-bottom: 12px;
}

.metadata-item h4 {
  color: var(--text-light);
  margin-bottom: 4px;
  font-size: 14px;
}

.metadata-item p {
  font-size: 15px;
}

.disease-stats {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 15px;
  width: 100%;
}

.disease-stat-card {
  background-color: var(--ui-card-bg);
  border-radius: var(--border-radius);
  padding: 15px;
  text-align: center;
}

.disease-stat-card h4 {
  font-size: 14px;
  color: var(--text-light);
  margin-bottom: 10px;
  font-family: 'Poppins', sans-serif;
}

.disease-stat-value {
  font-size: 22px;
  font-weight: 600;
  color: var(--dark-color);
}

.disease-charts-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
}

.disease-chart-wrapper {
  background-color: var(--viz-bg);
  border-radius: var(--border-radius);
  padding: 15px;
  height: 350px;
}

.disease-chart-wrapper h3 {
  margin-bottom: 15px;
  font-size: 16px;
  font-family: 'Poppins', sans-serif;
}

.disease-chart-wrapper canvas {
  max-height: 280px;
}

/* Genomics Section */
.genomics-selector {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: 20px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 10px;
  box-shadow: var(--box-shadow);
}

.genomics-btn {
  padding: 8px 15px;
  margin: 5px;
  background: none;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s;
  color: var(--text-light);
}

.genomics-btn.active {
  background-color: var(--secondary-color);
  color: white;
}

.genomics-container {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 20px;
  box-shadow: var(--box-shadow);
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.variants-container h3,
.genomics-viz-container h3 {
  margin-bottom: 15px;
  font-size: 18px;
  font-family: 'Poppins', sans-serif;
}

.genomics-chart-container {
  height: 200px;
margin-bottom: 20px;
}

.variants-table-container {
  max-height: 200px;
  overflow-y: auto;
}

.variants-table {
  width: 100%;
  border-collapse: collapse;
}

.variants-table th,
.variants-table td {
  padding: 10px;
  text-align: left;
  border-bottom: 1px solid var(--light-color);
}

.variants-table th {
  font-weight: 600;
  color: var(--text-light);
  font-size: 14px;
}

.genomics-viz {
  height: 400px;
  background-color: var(--viz-bg);
  border-radius: var(--border-radius);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
}

.genomics-placeholder {
  color: var(--text-light);
  font-style: italic;
}

/* Styling for selected variant in table */
#variants-table-body tr.selected-variant {
  background-color: var(--secondary-50);
  border-left: 3px solid var(--secondary-color);
}

#variants-table-body tr:hover {
  background-color: var(--primary-50);
  transition: background-color 0.2s ease;
}

/* SVG styling for mutation visualization */
#mutation-viz svg text {
  font-family: 'Inter', sans-serif;
}

#mutation-viz .mutation:hover circle {
  fill-opacity: 0.8;
  r: 9;
  transition: all 0.2s ease;
}

/* Mutation tooltip */
.mutation-tooltip {
  font-size: 12px;
  line-height: 1.4;
  color: var(--text-color);
}

.mutation-tooltip strong {
  font-weight: 600;
  color: var(--secondary-600);
}

/* Axis styling */
#mutation-viz .domain,
#mutation-viz .tick line {
  stroke: var(--text-light);
  opacity: 0.3;
}

[data-theme="dark"] #mutation-viz .mutation-tooltip {
  background-color: var(--card-color) !important;
  color: var(--text-color) !important;
  border-color: var(--secondary-600) !important;
}

/* Predictions Section */
.predictions-controls {
  display: flex;
  margin-bottom: 20px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 15px;
  box-shadow: var(--box-shadow);
}

.predictions-controls-content {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.predictions-controls-section {
  margin-bottom: 5px;
}

.predictions-controls-section h4 {
  font-size: 15px;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--secondary-700);
  font-family: 'Poppins', sans-serif;
}

.predictions-selector {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

.prediction-btn {
  padding: 8px 15px;
  background: none;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s;
  color: var(--text-light);
}

.prediction-btn.active {
  background-color: var(--secondary-color);
  color: white;
}

.predictions-timeframe {
  display: flex;
}

.timeframe-btn {
  padding: 8px 15px;
  background: none;
  border: 1px solid var(--light-color);
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s;
  color: var(--text-light);
}

.timeframe-btn:first-child {
  border-radius: var(--border-radius) 0 0 var(--border-radius);
}

.timeframe-btn:last-child {
  border-radius: 0 var(--border-radius) var(--border-radius) 0;
}

.timeframe-btn.active {
  background-color: var(--secondary-color);
  color: white;
  border-color: var(--secondary-color);
}

.predictions-container {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 20px;
  box-shadow: var(--box-shadow);
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.prediction-map-container h3 {
  margin-bottom: 15px;
  font-size: 18px;
}

.prediction-map {
  height: 300px;
  background-color: var(--viz-big);
  border-radius: var(--border-radius);
}

.prediction-charts {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
}

.prediction-chart-card {
  background-color: var(--viz-bg);
  border-radius: var(--border-radius);
  padding: 15px;
  height: 300px;
  display: flex;
  flex-direction: column;
}

.prediction-chart-card h3 {
  margin-bottom: 15px;
  font-size: 16px;
  font-family: 'Poppins', sans-serif;
}

.prediction-chart-card canvas {
  flex: 1;
  max-height: 220px;
}

.risk-matrix {
  height: 220px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
}

.prediction-metrics {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 15px;
}

.metric-card {
  background-color: var(--viz-bg);
  border-radius: var(--border-radius);
  padding: 15px;
  text-align: center;
}

.metric-card h4 {
  font-size: 14px;
  color: var(--text-light);
  margin-bottom: 10px;
  font-family: 'Poppins', sans-serif;
}

.metric-value {
  font-size: 18px;
  font-weight: 600;
  color: var(--dark-color);
}

/* Datasets Section */
.datasets-search {
  display: flex;
  margin-bottom: 20px;
}

.datasets-search input {
  flex: 1;
  padding: 10px 15px;
  border: 1px solid var(--light-color);
  border-radius: var(--border-radius) 0 0 var(--border-radius);
  font-size: 14px;
  outline: none;
}

.datasets-search button {
  padding: 10px 20px;
  background-color: var(--secondary-color);
  color: white;
  border: none;
  border-radius: 0 var(--border-radius) var(--border-radius) 0;
  cursor: pointer;
  font-size: 14px;
}

.datasets-filters {
  display: flex;
  gap: 15px;
  margin-bottom: 20px;
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 15px;
  box-shadow: var(--box-shadow);
}

.filter {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.filter label {
  font-size: 14px;
  color: var(--text-light);
  margin-bottom: 5px;
}

.filter select {
  padding: 8px;
  border-radius: 4px;
  border: 1px solid var(--light-color);
  background-color: var(--background-color);
  color: var(--text-color);
  font-size: 14px;
}

.datasets-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.dataset-card {
  background-color: var(--card-color);
  border-radius: var(--border-radius);
  padding: 20px;
  box-shadow: var(--box-shadow);
}

.dataset-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.dataset-header h4 {
  font-size: 16px;
  font-weight: 600;
}

.dataset-tag {
  font-size: 12px;
  padding: 2px 8px;
  border-radius: 10px;
  font-weight: 500;
}

.dataset-tag.official {
  background-color: rgba(52, 152, 219, 0.2);
  color: var(--secondary-color);
}

.dataset-tag.genomic {
  background-color: rgba(142, 68, 173, 0.2);
  color: #8e44ad;
}

.dataset-tag.collaborative {
  background-color: rgba(46, 204, 113, 0.2);
  color: var(--success-color);
}

.dataset-description {
  color: var(--text-color);
  font-size: 14px;
  margin-bottom: 15px;
  height: 60px;
  overflow: hidden;
}

.dataset-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 15px;
  font-size: 12px;
  color: var(--text-light);
}

.dataset-meta span {
  display: flex;
  align-items: center;
}

.dataset-meta i {
  margin-right: 5px;
}

.btn-import {
  width: 100%;
  padding: 8px;
  background-color: var(--background-color);
  color: var(--text-color);
  border: 1px solid var(--light-color);
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s;
}

.btn-import:hover {
  background-color: var(--secondary-color);
  color: white;
  border-color: var(--secondary-color);
}

/* Responsive Design */
@media (max-width: 1200px) {
  .stats-container,
  .disease-stats,
  .prediction-metrics,
  .datasets-container {
    grid-template-columns: repeat(2, 1fr);
  }

  .map-content {
    grid-template-columns: 1fr;
  }

  .map-stats {
    grid-template-columns: repeat(4, 1fr);
    display: grid;
  }

  .outbreak-cards {
    grid-template-columns: repeat(2, 1fr);
  }

  .disease-charts-container,
  .prediction-charts,
  .genomics-container {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 991px) {
  .sidebar {
    left: 10px;
  }

  .content {
    margin-left: 74px;
  }

  .search-bar {
    width: 200px;
  }

  .logo img {
    width: 36px;
  }

  .mobile-menu-toggle {
    display: block;
  }

  .nav-items {
    position: absolute;
    top: var(--header-height);
    left: 0;
    width: 100%;
    background: var(--primary-400);
    flex-direction: column;
    gap: 0;
    margin-left: 0;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease;
    z-index: 30;
  }

  .nav-items.show {
    max-height: 500px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  .nav-item {
    padding: 15px 20px;
    width: 100%;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }

  .dropdown-content {
    position: static;
    width: 100%;
    box-shadow: none;
    border-radius: 0;
    padding: 10px 0 10px 20px;
  }

  .dropdown-content.two-columns {
    flex-direction: column !important;
    min-width: auto;
    left: 0;
    width: 100%;
  }

  .dropdown-column {
    width: 100%;
    padding: 0;
  }
}

@media (max-width: 768px) {
  .stats-container,
  .outbreak-cards,
  .disease-stats,
  .datasets-container {
    grid-template-columns: 1fr;
  }

  .map-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  #world-map {
    height: 350px;
  }

  .datasets-filters {
    flex-direction: column;
  }

  header {
    flex-direction: column;
    height: auto;
    padding: 10px;
  }

  .search-bar {
    width: 100%;
    margin-bottom: 10px;
  }

  .header-actions {
    width: 100%;
    justify-content: space-between;
  }

  .navbar-right {
    display: flex;
    align-items: center;
  }

  .login-btn, .register-btn {
    padding: 6px 15px;
    font-size: 12px;
  }

  .login-btn {
    margin-right: 8px;
  }
}

@media (max-width: 576px) {
  .section {
    padding: 15px 10px;
  }

  .disease-selector,
  .genomics-selector,
  .predictions-controls {
    flex-direction: column;
    gap: 10px;
  }

  .timeframe-btn:first-child,
  .timeframe-btn:last-child {
    border-radius: var(--border-radius);
  }

  .predictions-timeframe {
    flex-wrap: wrap;
    gap: 5px;
  }
}

/* Footer Styles */
.dashboard-footer {
  background-color: var(--secondary-color);
  color: #fff;
  padding: 40px 20px 20px;
  margin-top: 40px;
}

.footer-content {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 30px;
}

.footer-logo {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

.footer-logo-img {
  width: 50px;
  height: auto;
  filter: brightness(0) invert(1);
}

.footer-logo-text h3 {
  font-family: 'Poppins', sans-serif;
  font-weight: 600;
  margin-bottom: 5px;
}

.footer-logo-text p {
  font-size: 12px;
  opacity: 0.8;
}

.footer-links {
  display: flex;
  flex-wrap: wrap;
  gap: 40px;
}

.footer-links-column {
  min-width: 150px;
}

.footer-links-column h4 {
  font-family: 'Poppins', sans-serif;
  margin-bottom: 15px;
  font-weight: 600;
  font-size: 16px;
  color: var(--primary-200);
}

.footer-links-column a {
  display: block;
  color: #fff;
  opacity: 0.8;
  text-decoration: none;
  margin-bottom: 10px;
  font-size: 14px;
  transition: all 0.3s ease;
}

.footer-links-column a:hover {
  opacity: 1;
  color: var(--primary-300);
  transform: translateX(5px);
}

.social-links {
  display: flex;
  gap: 15px;
  margin-bottom: 15px;
}

.social-links a {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.1);
  color: #fff;
  font-size: 18px;
  transition: all 0.3s ease;
}

.social-links a:hover {
  background-color: var(--primary-500);
  transform: translateY(-5px);
}

.footer-contact {
  font-size: 14px;
  opacity: 0.8;
  margin-bottom: 8px;
}

.footer-bottom {
  max-width: 1200px;
  margin: 30px auto 0;
  padding-top: 20px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 20px;
  font-size: 13px;
  opacity: 0.7;
}

.footer-made-with i {
  color: #e25555;
  margin: 0 3px;
}

/* Responsive Styles for Footer */
@media (max-width: 768px) {
  .footer-content {
    flex-direction: column;
    gap: 30px;
  }

  .footer-logo {
    justify-content: center;
  }

  .footer-links {
    justify-content: space-around;
  }

  .footer-bottom {
    flex-direction: column;
    text-align: center;
    gap: 10px;
  }
}

@media (max-width: 576px) {
  .footer-links {
    flex-direction: column;
    gap: 30px;
  }

  .social-links {
    justify-content: center;
  }

  .footer-contact {
    text-align: center;
  }
}


</style>

<script>
// Global variables
let currentDisease = 'mpox-2024';
let diseaseData = {};
let chartsInstances = {};
let darkMode = localStorage.getItem('darkMode') === 'enabled';

// Fetch all disease data when the page loads
document.addEventListener('DOMContentLoaded', async function() {
  // Initialize dark mode
  initDarkMode();

  // Initialize navbar functionality
  initNavbar();

  // Initialize mobile menu
  initMobileMenu();

  // Initialize menu navigation
  initMenuNavigation();

  // Fetch disease data first and wait for it to complete
  await fetchDiseaseData();

  // Initialize components that depend on disease data
  initDiseaseSelectors();
  initMapPlaceholders();

  // Initialize search functionality
  initSearch();

  // Initialize buttons and interactive elements
  initInteractiveElements();
});

// Initialize dark mode functionality
function initDarkMode() {
  // Check if user has previously selected dark mode
  if (darkMode) {
    document.documentElement.setAttribute('data-theme', 'dark');
  }

  const darkModeToggle = document.getElementById('dark-mode-toggle');
  if (darkModeToggle) {
    darkModeToggle.addEventListener('click', function() {
      // Toggle dark mode
      darkMode = !darkMode;

      // Update localStorage
      localStorage.setItem('darkMode', darkMode ? 'enabled' : 'disabled');

      // Apply or remove the dark theme class
      if (darkMode) {
        document.documentElement.setAttribute('data-theme', 'dark');
      } else {
        document.documentElement.removeAttribute('data-theme');
      }

      // Update charts with new theme colors if they exist
      updateChartsTheme();
    });
  }
}

// Update charts theme when switching modes
function updateChartsTheme() {
  // Update all chart instances with new theme colors
  for (const chartId in chartsInstances) {
    if (chartsInstances[chartId]) {
      chartsInstances[chartId].update();
    }
  }
}

// Initialize mobile menu functionality
function initMobileMenu() {
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const navItems = document.getElementById('nav-items');

  if (mobileMenuToggle && navItems) {
    mobileMenuToggle.addEventListener('click', function() {
      navItems.classList.toggle('show');

      // Change icon based on menu state
      const icon = this.querySelector('i');
      if (navItems.classList.contains('show')) {
        icon.classList.remove('fa-bars');
        icon.classList.add('fa-times');
      } else {
        icon.classList.remove('fa-times');
        icon.classList.add('fa-bars');
      }
    });

    // Close menu when a link is clicked
    const navLinks = navItems.querySelectorAll('a');
    navLinks.forEach(link => {
      link.addEventListener('click', function() {
        // Only close if we're in mobile view (menu toggle is visible)
        if (window.getComputedStyle(mobileMenuToggle).display !== 'none') {
          navItems.classList.remove('show');
          const icon = mobileMenuToggle.querySelector('i');
          icon.classList.remove('fa-times');
          icon.classList.add('fa-bars');
        }
      });
    });

    // Close menu when clicking outside
    document.addEventListener('click', function(event) {
      if (!navItems.contains(event.target) && !mobileMenuToggle.contains(event.target) && navItems.classList.contains('show')) {
        navItems.classList.remove('show');
        const icon = mobileMenuToggle.querySelector('i');
        icon.classList.remove('fa-times');
        icon.classList.add('fa-bars');
      }
    });
  }
}

// Initialize navbar functionality
function initNavbar() {
  // Dropdown menu functionality
  const navItems = document.querySelectorAll('.nav-item');

  // Add click event to each nav item
  navItems.forEach(item => {
    const link = item.querySelector('a');
    const dropdown = item.querySelector('.dropdown-content');

    if (link && dropdown) {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();

        // Close all other open dropdowns
        navItems.forEach(otherItem => {
          if (otherItem !== item) {
            otherItem.classList.remove('active');
            const otherDropdown = otherItem.querySelector('.dropdown-content');
            if (otherDropdown) {
              otherDropdown.classList.remove('show');
            }
          }
        });

        // Toggle current dropdown
        item.classList.toggle('active');
        dropdown.classList.toggle('show');
      });
    }
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', function(e) {
    navItems.forEach(item => {
      const dropdown = item.querySelector('.dropdown-content');
      if (dropdown && !item.contains(e.target)) {
        item.classList.remove('active');
        dropdown.classList.remove('show');
      }
    });
  });

  // Search functionality
  const searchIcon = document.querySelector('.search-icon');
  const searchFlyout = document.getElementById('search-flyout');

  if (searchIcon && searchFlyout) {
    // Search icon click event
    searchIcon.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation(); // Prevent event from bubbling up
      toggleSearchFlyout();

      // Close any open dropdowns when search is opened
      navItems.forEach(item => {
        item.classList.remove('active');
        const dropdown = item.querySelector('.dropdown-content');
        if (dropdown) {
          dropdown.classList.remove('show');
        }
      });
    });

    // Close button click event
    const closeBtn = searchFlyout.querySelector('.search-close');
    if (closeBtn) {
      closeBtn.addEventListener('click', function() {
        hideSearchFlyout();
      });
    }

    // Close search flyout when clicked outside
    document.addEventListener('click', function(event) {
      if (searchFlyout.classList.contains('active') &&
          !searchFlyout.contains(event.target) &&
          !searchIcon.contains(event.target)) {
        hideSearchFlyout();
      }
    });

    // Close search flyout when ESC key is pressed
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && searchFlyout.classList.contains('active')) {
        hideSearchFlyout();
      }
    });

    // Handle search submission
    const searchInput = searchFlyout.querySelector('input');
    if (searchInput) {
      searchInput.addEventListener('keyup', function(e) {
        if (e.key === 'Enter') {
          performSearch(this.value);
        }
      });

      // Prevent clicks inside search flyout from closing it
      searchFlyout.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    }
  }

  function toggleSearchFlyout() {
    if (searchFlyout.classList.contains('active')) {
      hideSearchFlyout();
    } else {
      showSearchFlyout();
    }
  }

  function showSearchFlyout() {
    searchFlyout.classList.add('active');
    setTimeout(() => {
      // Focus on input after animation completes
      const searchInput = searchFlyout.querySelector('input');
      if (searchInput) searchInput.focus();
    }, 300);
  }

  function hideSearchFlyout() {
    searchFlyout.classList.remove('active');
  }

  function performSearch(query) {
    if (query.trim()) {
      console.log('Searching for:', query);
      // In a real implementation, this would perform a search and display results
      // For now, just hide the search flyout and show a temporary message
      hideSearchFlyout();

      // Show a temporary search message
      const messageDiv = document.createElement('div');
      messageDiv.className = 'search-message';
      messageDiv.innerHTML = `<p>Searching for: <strong>${query}</strong></p>`;
      document.body.appendChild(messageDiv);

      setTimeout(() => {
        messageDiv.classList.add('show');
        setTimeout(() => {
          messageDiv.classList.remove('show');
          setTimeout(() => {
            document.body.removeChild(messageDiv);
          }, 300);
        }, 2000);
      }, 100);
    }
  }
}

// Initialize navigation menu
function initMenuNavigation() {
  const menuItems = document.querySelectorAll('.menu-item');
  const sections = document.querySelectorAll('.section');

  menuItems.forEach(item => {
    item.addEventListener('click', function() {
      const targetSection = this.getAttribute('data-section');

      // Update menu active state
      menuItems.forEach(mi => mi.classList.remove('active'));
      this.classList.add('active');

      // Show target section, hide others
      sections.forEach(section => {
        section.classList.remove('active');
        if (section.id === targetSection) {
          section.classList.add('active');
        }
      });

      // Update data based on active section
      if (targetSection === 'diseases') {
        // Get the active disease button or default to the first one
        const activeBtn = document.querySelector('.disease-btn.active') || document.querySelector('.disease-btn');
        if (activeBtn) {
          const diseaseId = activeBtn.getAttribute('data-disease');
          updateDiseaseDetails(diseaseId);
        }
      } else if (targetSection === 'genomics') {
        // Get the active genomics button or default to the first one
        const activeBtn = document.querySelector('.genomics-btn.active') || document.querySelector('.genomics-btn');
        if (activeBtn) {
          const diseaseId = activeBtn.getAttribute('data-disease');
          updateGenomicsData(diseaseId);
        }
      } else if (targetSection === 'predictions') {
        // Reset prediction data with a slight delay to ensure DOM is ready
        setTimeout(() => {
          // Force active disease to be current
          const activeBtn = document.querySelector('.prediction-btn.active') || document.querySelector('.prediction-btn');
          if (activeBtn) {
            currentDisease = activeBtn.getAttribute('data-disease');
          }
          initPredictionsData();
        }, 200);
      }
    });
  });
}

// Fetch disease data from API
async function fetchDiseaseData() {
  try {
    console.log("Fetching disease data...");

    // Use the full URL including the host
    const baseUrl = window.location.origin;
    console.log("Base URL:", baseUrl);

    // Fetch all diseases summary
    const response = await fetch(`${baseUrl}/api/diseases`);

    if (!response.ok) {
      throw new Error(`Failed to fetch diseases list: ${response.status} ${response.statusText}`);
    }

    const diseasesList = await response.json();
    console.log("Diseases list:", diseasesList);

    if (!Array.isArray(diseasesList) || diseasesList.length === 0) {
      throw new Error("Disease list is empty or not in expected format");
    }

    // Fetch detailed data for each disease
    for (const disease of diseasesList) {
      console.log(`Fetching details for ${disease.id}...`);
      const detailResponse = await fetch(`${baseUrl}/api/diseases/${disease.id}`);

      if (!detailResponse.ok) {
        throw new Error(`Failed to fetch details for ${disease.id}: ${detailResponse.status} ${detailResponse.statusText}`);
      }

      const detailData = await detailResponse.json();
      diseaseData[disease.id] = detailData;
      console.log(`Loaded data for ${disease.id}:`, detailData);
    }

    console.log("Loaded disease data:", Object.keys(diseaseData));

    // Initialize the dashboard with data
    initDashboardData();

    // Create initial charts
    createOverviewCharts();
    updateDiseaseDetails(currentDisease);
    updateGenomicsData(currentDisease);
    initPredictionsData();

    return diseaseData;
  } catch (error) {
    console.error('Error fetching disease data:', error);
    alert(`Error loading disease data: ${error.message}. Please check the console for details and reload the page.`);
    throw error;
  }
}

// Initialize disease selector buttons
function initDiseaseSelectors() {
  // Disease detail page selectors
  const diseaseButtons = document.querySelectorAll('.disease-btn');
  diseaseButtons.forEach(btn => {
    btn.addEventListener('click', function() {
      const diseaseId = this.getAttribute('data-disease');

      // Update active button
      diseaseButtons.forEach(b => b.classList.remove('active'));
      this.classList.add('active');

      // Update disease details
      updateDiseaseDetails(diseaseId);
    });
  });

  // Genomics page selectors
  const genomicsButtons = document.querySelectorAll('.genomics-btn');
  genomicsButtons.forEach(btn => {
    btn.addEventListener('click', function() {
      const diseaseId = this.getAttribute('data-disease');

      // Update active button
      genomicsButtons.forEach(b => b.classList.remove('active'));
      this.classList.add('active');

      // Update genomics data
      updateGenomicsData(diseaseId);
    });
  });

  // Outbreak card buttons
  const outbreakCards = document.querySelectorAll('.outbreak-card');
  outbreakCards.forEach(card => {
    const viewDetailsBtn = card.querySelector('.btn-details');
    viewDetailsBtn.addEventListener('click', function() {
      const diseaseId = card.getAttribute('data-disease');

      // Navigate to disease detail page
      const menuItems = document.querySelectorAll('.menu-item');
      menuItems.forEach(mi => {
        mi.classList.remove('active');
        if (mi.getAttribute('data-section') === 'diseases') {
          mi.classList.add('active');
        }
      });

      // Show diseases section
      const sections = document.querySelectorAll('.section');
      sections.forEach(section => {
        section.classList.remove('active');
        if (section.id === 'diseases') {
          section.classList.add('active');
        }
      });

      // Update active disease button
      const diseaseButtons = document.querySelectorAll('.disease-btn');
      diseaseButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-disease') === diseaseId) {
          btn.classList.add('active');
        }
      });

      // Update disease details
      updateDiseaseDetails(diseaseId);
    });
  });
}

// Initialize search functionality
function initSearch() {
  const searchInput = document.getElementById('search-input');

  if (searchInput) {
    searchInput.addEventListener('keyup', async function(e) {
      if (e.key === 'Enter') {
        const query = this.value.trim();
        if (query) {
          try {
            const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
            const results = await response.json();

            // For demo purposes, we'll just log the results
            console.log('Search results:', results);

            // In a full implementation, you would display these results in a dropdown
            // or navigate to a search results page
          } catch (error) {
            console.error('Error searching:', error);
          }
        }
      }
    });
  }

  // Dataset search
  const datasetSearchBtn = document.getElementById('search-datasets-btn');
  if (datasetSearchBtn) {
    datasetSearchBtn.addEventListener('click', function() {
      const datasetSearchEl = document.getElementById('dataset-search');
      const datasetQuery = datasetSearchEl ? datasetSearchEl.value.trim() : '';
      if (datasetQuery) {
        // For demo purposes, just log the query
        console.log('Searching for datasets:', datasetQuery);
        // In a real implementation, this would fetch and display matching datasets
      }
    });
  }
}

// Initialize buttons and interactive elements
function initInteractiveElements() {
  // Prediction timeframe buttons
  const timeframeButtons = document.querySelectorAll('.timeframe-btn');
  timeframeButtons.forEach(btn => {
    btn.addEventListener('click', function() {
      timeframeButtons.forEach(b => b.classList.remove('active'));
      this.classList.add('active');

      const days = this.getAttribute('data-days');
      updatePredictionTimeframe(days);
    });
  });

  // Prediction disease buttons
  const predictionButtons = document.querySelectorAll('.prediction-btn');
  predictionButtons.forEach(btn => {
    btn.addEventListener('click', function() {
      const diseaseId = this.getAttribute('data-disease');

      // Update active button
      predictionButtons.forEach(b => b.classList.remove('active'));
      this.classList.add('active');

      // Update prediction disease
      updatePredictionDisease(diseaseId);
    });
  });

  // Dataset import buttons
  const importButtons = document.querySelectorAll('.btn-import');
  importButtons.forEach(btn => {
    btn.addEventListener('click', function() {
      const datasetCard = this.closest('.dataset-card');
      const datasetName = datasetCard.querySelector('h4').textContent;

      // For demo purposes, just show an alert
      alert(`Importing dataset: ${datasetName}`);
      // In a real implementation, this would trigger the import process
    });
  });

  // Disclaimer toggle - moved to initInteractiveElements() to ensure it's initialized after DOM is fully loaded
  function initDisclaimerToggle() {
    const disclaimerToggle = document.getElementById('disclaimer-toggle');
    const disclaimerContainer = document.getElementById('disclaimer-container');

    if (disclaimerToggle && disclaimerContainer) {
      // Make sure it's hidden by default
      disclaimerContainer.classList.add('hidden');

      // Add click event listener
      disclaimerToggle.addEventListener('click', function(e) {
        e.preventDefault();
        disclaimerContainer.classList.toggle('hidden');

        // Subtle animation effect
        if (!disclaimerContainer.classList.contains('hidden')) {
          disclaimerContainer.style.opacity = '0';
          setTimeout(() => {
            disclaimerContainer.style.opacity = '1';
          }, 10);
        }
      });

      console.log('Disclaimer toggle initialized');
    } else {
      console.warn('Disclaimer elements not found');
    }
  }

  // Call this directly - no need to wait since we're already in a DOMContentLoaded event
  initDisclaimerToggle();
}

// Initialize dashboard data
function initDashboardData() {
  // This function would populate the dashboard with initial data
  // For demonstration purposes, we'll keep the hardcoded values
}

// Initialize overview page
function createOverviewCharts() {
  // Charts have been removed from overview cards
  console.log("Overview section initialized");
}

// Create a small line chart for the outbreak cards
function createOutbreakChart(chartId, timelineData) {
  const ctx = document.getElementById(chartId).getContext('2d');

  // Map chart IDs to disease IDs
  const chartToDiseaseMap = {
    'mpox-chart': 'mpox-2024',
    'h5n1-chart': 'h5n1-2024',
    'covid-chart': 'sarscov2',
    'ebola-chart': 'ebolavirus',
    'dengue-chart': 'dengue',
    'zika-chart': 'zika'
  };

  // Get disease-specific colors from the global distribution color mapping
  const diseaseColors = {
    'mpox-2024': '#8db4a3',
    'h5n1-2024': '#6498ac',
    'sarscov2': '#aeaac9',
    'ebolavirus': '#ecc188',
    'dengue': '#c57c80',
    'zika': '#c3b59c'
  };

  // Get the appropriate color for this chart
  const diseaseId = chartToDiseaseMap[chartId];
  const chartColor = diseaseColors[diseaseId] || '#3498db'; // Fallback if no mapping

  // Extract data for the chart
  const labels = timelineData.map(item => {
    const date = new Date(item.date);
    return `${date.getMonth() + 1}/${date.getDate()}`;
  });

  const data = timelineData.map(item => item.newCases);

  // Create the chart
  chartsInstances[chartId] = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'New Cases',
        data: data,
        borderColor: chartColor,
        backgroundColor: `${chartColor}33`, // 33 is 20% opacity in hex
        borderWidth: 2,
        tension: 0.4,
        fill: true
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false,
          labels: {
            color: getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim()
          }
        },
        tooltip: {
          enabled: true,
          mode: 'index',
          intersect: false,
          backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--card-color').trim(),
          titleColor: getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim(),
          bodyColor: getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim(),
          borderColor: getComputedStyle(document.documentElement).getPropertyValue('--light-color').trim(),
          borderWidth: 1,
          callbacks: {
            title: function(tooltipItems) {
              return 'Date: ' + tooltipItems[0].label;
            },
            label: function(context) {
              return 'New Cases: ' + formatNumber(context.raw);
            }
          }
        }
      },
      scales: {
        x: {
          display: true,
          title: {
            display: true,
            text: 'Date (Month/Day)',
            color: getComputedStyle(document.documentElement).getPropertyValue('--text-light').trim(),
            font: {
              size: 9
            }
          },
          ticks: {
            display: true,
            color: getComputedStyle(document.documentElement).getPropertyValue('--text-light').trim(),
            font: {
              size: 8
            },
            maxRotation: 0,
            autoSkip: true,
            maxTicksLimit: 3
          },
          grid: {
            display: false
          }
        },
        y: {
          display: true,
          title: {
            display: true,
            text: 'New Cases',
            color: getComputedStyle(document.documentElement).getPropertyValue('--text-light').trim(),
            font: {
              size: 9
            }
          },
          ticks: {
            display: true,
            color: getComputedStyle(document.documentElement).getPropertyValue('--text-light').trim(),
            font: {
              size: 8
            },
            maxTicksLimit: 3,
            callback: function(value) {
              return formatNumber(value);
            }
          },
          grid: {
            color: getComputedStyle(document.documentElement).getPropertyValue('--light-color').trim() + '33',
            drawBorder: false
          }
        }
      },
      elements: {
        point: {
          radius: 0,
          hitRadius: 10,
          hoverRadius: 4
        }
      }
    }
  });
}

// Update disease details section
function updateDiseaseDetails(diseaseId) {
  currentDisease = diseaseId;
  const disease = diseaseData[diseaseId];

  if (!disease) return;

  // Update stats
  document.getElementById('disease-total-cases').textContent = formatNumber(disease.totalCases);
  document.getElementById('disease-fatalities').textContent = formatNumber(disease.fatalitiesCount);

  const fatalityRate = (disease.fatalitiesCount / disease.totalCases * 100).toFixed(2);
  document.getElementById('disease-fatality-rate').textContent = `${fatalityRate}%`;

  // Calculate average R0 from variants
  const avgR0 = disease.genomicData.variants.reduce((sum, variant) => {
    return sum + (variant.r0 * (variant.percentage / 100));
  }, 0).toFixed(2);
  document.getElementById('disease-r0').textContent = avgR0;

  // Add disease information based on the selected disease
  updateDiseaseInformation(diseaseId);

  // Update charts
  updateTimelineChart(disease);
  updateGeoChart(disease);
}

// Add detailed disease information
function updateDiseaseInformation(diseaseId) {
  // Disease-specific information mapping
  const diseaseInfo = {
    'mpox-2024': {
      description: "Monkeypox is a zoonotic disease caused by the monkeypox virus, belonging to the Orthopoxvirus genus. The 2024 outbreak represents a concerning evolution with increased human-to-human transmission compared to historical patterns.",
      transmission: "Direct contact with infected animals or humans, bodily fluids, contaminated materials, and respiratory droplets during prolonged face-to-face contact.",
      incubation: "5-21 days, typically 6-13 days",
      symptoms: "Fever, headache, muscle aches, back pain, swollen lymph nodes, followed by a distinctive rash that evolves through several stages",
      prevention: "Avoid contact with infected animals or humans, practice good hand hygiene, use PPE when caring for patients, and vaccination for high-risk groups.",
      alerts: "WHO has declared a Public Health Emergency of International Concern due to the rapid spread across multiple regions and emergence of new transmission patterns."
    },
    'h5n1-2024': {
      description: "Highly pathogenic avian influenza (HPAI) H5N1 is primarily a disease of birds, but the 2024 strain shows concerning adaptations enabling more efficient transmission between mammals, raising pandemic potential.",
      transmission: "Contact with infected birds or their environments, limited human-to-human transmission in close contacts. Recent cases show possible airborne spread in mammals.",
      incubation: "2-8 days, typically 3-5 days",
      symptoms: "High fever, cough, severe respiratory difficulties, pneumonia, multi-organ failure in severe cases",
      prevention: "Avoid contact with sick or dead birds, thorough cooking of poultry products, vaccination of poultry, use of personal protective equipment when handling birds.",
      alerts: "FAO and WHO have issued a joint warning about the pandemic potential of current H5N1 strains with recommendations for enhanced surveillance and containment."
    },
    'sarscov2': {
      description: "SARS-CoV-2 is a coronavirus that causes COVID-19. Despite widespread vaccination efforts, the virus continues to evolve, producing variants that partially evade immunity from prior infection and vaccination.",
      transmission: "Respiratory droplets and aerosols, with some evidence of fomite transmission. High transmissibility, especially in indoor settings with poor ventilation.",
      incubation: "2-14 days, typically 5-6 days",
      symptoms: "Fever, cough, fatigue, loss of smell or taste, shortness of breath, ranging from mild to severe",
      prevention: "Vaccination, mask-wearing in high-risk settings, adequate ventilation, physical distancing, hand hygiene",
      alerts: "Current variants demonstrate immune evasion capabilities. Health authorities recommend updated booster doses targeting circulating variants, especially for vulnerable populations."
    },
    'ebolavirus': {
      description: "Ebola virus disease is a severe, often fatal illness affecting humans and other primates. The 2024 outbreak involves the Zaire ebolavirus species, the most lethal strain of the virus.",
      transmission: "Direct contact with blood, secretions, or other bodily fluids of infected people or animals, and with surfaces contaminated with these fluids.",
      incubation: "2-21 days, typically 8-10 days",
      symptoms: "Sudden fever, fatigue, muscle pain, headache, and sore throat, followed by vomiting, diarrhea, rash, and both internal and external bleeding",
      prevention: "Avoid contact with infected individuals, practice careful hygiene, use protective equipment when caring for patients, safe burial practices, vaccination in affected areas",
      alerts: "CDC and WHO have deployed rapid response teams to affected regions. Ring vaccination strategy is being implemented in outbreak epicenters."
    },
    'dengue': {
      description: "Dengue is a mosquito-borne viral disease that has rapidly spread in tropical and subtropical regions. The current outbreak demonstrates unusual intensity and geographic spread.",
      transmission: "Primarily transmitted by female Aedes aegypti mosquitoes and, to a lesser extent, Ae. albopictus. No direct person-to-person transmission.",
      incubation: "3-14 days, typically 4-7 days",
      symptoms: "High fever, severe headache, pain behind the eyes, joint and muscle pain, rash, mild bleeding (nose or gums)",
      prevention: "Vector control measures, personal protection from mosquito bites (repellents, appropriate clothing, mosquito nets), environmental management to reduce breeding sites",
      alerts: "PAHO has issued alerts for several Latin American countries experiencing abnormally high case counts. Climate change is contributing to expanded mosquito habitats."
    },
    'zika': {
      description: "Zika virus disease is caused by a virus transmitted primarily by Aedes mosquitoes. While symptoms are generally mild, Zika virus infection during pregnancy can cause severe birth defects.",
      transmission: "Primarily through infected Aedes mosquitoes. Can also be transmitted through sexual contact and from mother to fetus during pregnancy.",
      incubation: "3-14 days",
      symptoms: "Mild fever, rash, conjunctivitis, muscle and joint pain, malaise, headache. Many infections are asymptomatic.",
      prevention: "Protection against mosquito bites, elimination of breeding sites, use of condoms to prevent sexual transmission, postponing travel to affected areas for pregnant women",
      alerts: "WHO has highlighted recent unexpected spread to previously unaffected regions. Particular vigilance is recommended for pregnant women in endemic areas."
    }
  };

  // Get disease specific information or use placeholder
  const info = diseaseInfo[diseaseId] || {
    description: "Detailed information about this disease is being compiled.",
    transmission: "Information not available.",
    incubation: "Information not available.",
    symptoms: "Information not available.",
    prevention: "Information not available.",
    alerts: "No current alerts for this disease."
  };

  // Update disease information elements
  document.getElementById('disease-description').textContent = info.description;
  document.getElementById('disease-transmission').textContent = info.transmission;
  document.getElementById('disease-incubation').textContent = info.incubation;
  document.getElementById('disease-symptoms').textContent = info.symptoms;
  document.getElementById('disease-prevention').textContent = info.prevention;

  // Update alerts with appropriate styling based on disease severity
  const alertsElement = document.getElementById('disease-alerts');
  alertsElement.textContent = info.alerts;

  // Apply different styling based on disease severity
  if (diseaseId === 'h5n1-2024' || diseaseId === 'ebolavirus') {
    alertsElement.className = 'p-4 border-l-4 border-red-500 bg-red-50 text-red-700';
  } else if (diseaseId === 'mpox-2024' || diseaseId === 'dengue') {
    alertsElement.className = 'p-4 border-l-4 border-orange-500 bg-orange-50 text-orange-700';
  } else if (diseaseId === 'sarscov2') {
    alertsElement.className = 'p-4 border-l-4 border-yellow-500 bg-yellow-50 text-yellow-700';
  } else if (diseaseId === 'zika') {
    alertsElement.className = 'p-4 border-l-4 border-blue-500 bg-blue-50 text-blue-700';
  } else {
    alertsElement.className = 'p-4 border-l-4 border-gray-500 bg-gray-50 text-gray-700';
  }
}

// Update the timeline chart in disease details
function updateTimelineChart(disease) {
  const chartElement = document.getElementById('disease-timeline-chart');

  if (!chartElement) {
    console.error('Timeline chart element not found');
    return;
  }

  const ctx = chartElement.getContext('2d');

  // Destroy existing chart if it exists
  if (chartsInstances['disease-timeline-chart']) {
    chartsInstances['disease-timeline-chart'].destroy();
  }

  // Extract data for the chart
  const labels = disease.timeline.map(item => {
    const date = new Date(item.date);
    return `${date.getMonth() + 1}/${date.getDate()}`;
  });

  const data = disease.timeline.map(item => item.newCases);

  // Get theme colors from CSS variables
  const secondaryColor = getComputedStyle(document.documentElement).getPropertyValue('--secondary-color').trim();
  const textColor = getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim();
  const lightColor = getComputedStyle(document.documentElement).getPropertyValue('--light-color').trim();

  // Create the chart
  chartsInstances['disease-timeline-chart'] = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'New Cases',
        data: data,
        borderColor: secondaryColor || '#3498db',
        backgroundColor: secondaryColor ? `${secondaryColor}33` : 'rgba(52, 152, 219, 0.1)',
        borderWidth: 2,
        tension: 0.4,
        fill: true
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: true,
          position: 'top',
          labels: {
            color: textColor || '#2c3e50'
          }
        },
        tooltip: {
          enabled: true,
          backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--card-color').trim(),
          titleColor: textColor || '#2c3e50',
          bodyColor: textColor || '#2c3e50'
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          },
          ticks: {
            color: textColor || '#2c3e50'
          }
        },
        y: {
          beginAtZero: true,
          grid: {
            color: lightColor ? `${lightColor}33` : 'rgba(0, 0, 0, 0.05)'
          },
          ticks: {
            color: textColor || '#2c3e50'
          }
        }
      }
    }
  });
}

// Update the geographic distribution chart
function updateGeoChart(disease) {
  const chartElement = document.getElementById('disease-geo-chart');

  if (!chartElement) {
    console.error('Geo chart element not found');
    return;
  }

  const ctx = chartElement.getContext('2d');

  // Destroy existing chart if it exists
  if (chartsInstances['disease-geo-chart']) {
    chartsInstances['disease-geo-chart'].destroy();
  }

  // Extract data for the chart
  const labels = Object.keys(disease.countries);
  const data = Object.values(disease.countries);

  // Create color array with the first country highlighted using CSS variables
  const secondaryDark = getComputedStyle(document.documentElement).getPropertyValue('--secondary-600').trim() || '#3d677d';
  const secondaryLight = getComputedStyle(document.documentElement).getPropertyValue('--secondary-300').trim() || '#95becb';

  const backgroundColors = labels.map((_, index) =>
    index === 0 ? secondaryDark : secondaryLight
  );

  // Create the chart
  chartsInstances['disease-geo-chart'] = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Cases by Country',
        data: data,
        backgroundColor: backgroundColors,
        borderColor: 'rgba(0, 0, 0, 0)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      height: 300,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          }
        },
        y: {
          beginAtZero: true,
          grid: {
            color: 'rgba(0, 0, 0, 0.05)'
          }
        }
      }
    }
  });
}

// Update genomics data
function updateGenomicsData(diseaseId) {
  const disease = diseaseData[diseaseId];

  if (!disease) return;

  // Update variants chart
  updateVariantsChart(disease);

  // Update variants table
  updateVariantsTable(disease);
}

// Update the variants chart in genomics section
function updateVariantsChart(disease) {
  const ctx = document.getElementById('variants-chart').getContext('2d');

  // Destroy existing chart if it exists
  if (chartsInstances['variants-chart']) {
    chartsInstances['variants-chart'].destroy();
  }

  // Extract data for the chart
  const labels = disease.genomicData.variants.map(v => v.name);
  const data = disease.genomicData.variants.map(v => v.percentage);

  // Use specified colors for variant charts
  const colors = [
    '#a6c9b8',
    '#649baf',
    '#aeaac9',
    '#ecc188',
    'rgba(230, 126, 34, 0.8)' // keep one backup color in case there are more variants
  ];

  // Create the chart
  chartsInstances['variants-chart'] = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: labels,
      datasets: [{
        data: data,
        backgroundColor: colors.slice(0, data.length),
        borderColor: '#ffffff',
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'right'
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              return `${context.label}: ${context.raw}%`;
            }
          }
        }
      }
    }
  });
}

// Update the variants table
function updateVariantsTable(disease) {
  const tableBody = document.getElementById('variants-table-body');
  tableBody.innerHTML = '';

  // Create mutation data for each variant (for demo purposes)
  const mutationData = {
    "Clade I": [
      { gene: "S", position: 484, original: "E", mutation: "K", effect: "Receptor binding" },
      { gene: "S", position: 501, original: "N", mutation: "Y", effect: "Increased transmissibility" },
      { gene: "N", position: 203, original: "R", mutation: "K", effect: "Nucleocapsid stability" }
    ],
    "Clade II": [
      { gene: "S", position: 452, original: "L", mutation: "R", effect: "Immune escape" },
      { gene: "S", position: 478, original: "T", mutation: "K", effect: "Receptor binding" },
      { gene: "ORF1ab", position: 4715, original: "P", mutation: "L", effect: "Replication efficiency" },
      { gene: "S", position: 614, original: "D", mutation: "G", effect: "Spike stability" }
    ],
    "Clade III": [
      { gene: "S", position: 417, original: "K", mutation: "N", effect: "Receptor binding" },
      { gene: "S", position: 681, original: "P", mutation: "H", effect: "Furin cleavage" }
    ],
    "DENV-1": [
      { gene: "E", position: 204, original: "L", mutation: "F", effect: "Envelope structure" },
      { gene: "NS1", position: 123, original: "A", mutation: "V", effect: "Immune evasion" }
    ],
    "DENV-2": [
      { gene: "prM", position: 53, original: "H", mutation: "Q", effect: "Virion assembly" },
      { gene: "NS5", position: 401, original: "R", mutation: "K", effect: "RNA replication" }
    ],
    "DENV-3": [
      { gene: "C", position: 87, original: "T", mutation: "M", effect: "Capsid structure" },
      { gene: "NS3", position: 250, original: "S", mutation: "T", effect: "Protease activity" }
    ],
    "DENV-4": [
      { gene: "E", position: 345, original: "N", mutation: "Y", effect: "Receptor binding" }
    ],
    "JN.1": [
      { gene: "S", position: 339, original: "G", mutation: "H", effect: "Immune escape" },
      { gene: "S", position: 346, original: "R", mutation: "T", effect: "Receptor binding" },
      { gene: "S", position: 444, original: "K", mutation: "T", effect: "Neutralization resistance" }
    ],
    "XBB.1.5": [
      { gene: "S", position: 486, original: "F", mutation: "P", effect: "Receptor binding" },
      { gene: "S", position: 252, original: "G", mutation: "V", effect: "Immune escape" }
    ],
    "FLiRT": [
      { gene: "S", position: 456, original: "L", mutation: "R", effect: "Receptor binding" },
      { gene: "S", position: 478, original: "T", mutation: "R", effect: "Immune escape" }
    ],
    "Others": [
      { gene: "Various", position: 0, original: "-", mutation: "-", effect: "Multiple effects" }
    ]
  };

  // Add mutations for other variants
  for (const key in disease.genomicData.variants) {
    if (!mutationData[disease.genomicData.variants[key].name]) {
      mutationData[disease.genomicData.variants[key].name] = [
        { gene: "S", position: Math.floor(Math.random() * 1000) + 1, original: "A", mutation: "T", effect: "Unknown" },
        { gene: "N", position: Math.floor(Math.random() * 500) + 1, original: "C", mutation: "G", effect: "Unknown" }
      ];
    }
  }

  disease.genomicData.variants.forEach(variant => {
    const row = document.createElement('tr');

    // Create a string representation of mutations for the table
    const mutations = mutationData[variant.name] || [];
    const mutationText = mutations.map(m => `${m.gene}:${m.original}${m.position}${m.mutation}`).join(', ');

    row.innerHTML = `
      <td>${variant.name}</td>
      <td>${variant.percentage}%</td>
      <td>${variant.r0}</td>
      <td>${mutationText}</td>
    `;

    // Make row clickable to show mutation visualization
    row.style.cursor = 'pointer';
    row.addEventListener('click', () => {
      // Highlight the selected row
      document.querySelectorAll('#variants-table-body tr').forEach(tr => {
        tr.classList.remove('selected-variant');
      });
      row.classList.add('selected-variant');

      // Visualize the mutations
      visualizeMutations(variant.name, mutationData[variant.name] || []);
    });

    tableBody.appendChild(row);
  });

  // Select the first variant by default
  if (disease.genomicData.variants.length > 0) {
    const firstVariant = disease.genomicData.variants[0].name;
    document.querySelector('#variants-table-body tr').classList.add('selected-variant');
    visualizeMutations(firstVariant, mutationData[firstVariant] || []);
  }
}

// Visualize mutations using D3.js
function visualizeMutations(variantName, mutations) {
  const container = document.getElementById('mutation-viz');

  // Clear previous visualization
  container.innerHTML = '';

  if (mutations.length === 0) {
    container.innerHTML = '<p class="genomics-placeholder">No mutation data available for this variant</p>';
    return;
  }

  // Set up visualization dimensions
  const width = container.clientWidth;
  const height = container.clientHeight;
  const margin = { top: 50, right: 30, bottom: 50, left: 80 };
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;

  // Create SVG
  const svg = d3.select('#mutation-viz')
    .append('svg')
    .attr('width', width)
    .attr('height', height);

  // Create a group for the visualization
  const g = svg.append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`);

  // Add title
  svg.append('text')
    .attr('x', width / 2)
    .attr('y', 25)
    .attr('text-anchor', 'middle')
    .style('font-family', "'Poppins', sans-serif")
    .style('font-weight', '600')
    .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim())
    .text(`Key Mutations in ${variantName}`);

  // Sort mutations by gene and position
  mutations.sort((a, b) => {
    if (a.gene === b.gene) {
      return a.position - b.position;
    }
    return a.gene.localeCompare(b.gene);
  });

  // Group mutations by gene
  const geneGroups = {};
  mutations.forEach(m => {
    if (!geneGroups[m.gene]) {
      geneGroups[m.gene] = [];
    }
    geneGroups[m.gene].push(m);
  });

  const genes = Object.keys(geneGroups);
  const geneColors = {
    'S': '#649baf',
    'N': '#a6c9b8',
    'E': '#aeaac9',
    'ORF1ab': '#ecc188',
    'M': '#e77c7c',
    'NS1': '#b0a676',
    'NS3': '#76b0a6',
    'NS5': '#a676b0',
    'prM': '#b0766a',
    'C': '#6ab076'
  };

  // Create a genomic coordinate scale
  const xScale = d3.scaleLinear()
    .domain([0, d3.max(mutations, d => d.position) + 100])
    .range([0, innerWidth]);

  // Create the y-scale for genes
  const yScale = d3.scaleBand()
    .domain(genes)
    .range([0, innerHeight])
    .padding(0.3);

  // Add x-axis showing positions
  g.append('g')
    .attr('transform', `translate(0, ${innerHeight})`)
    .call(d3.axisBottom(xScale))
    .selectAll('text')
    .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim());

  // Add y-axis showing genes
  g.append('g')
    .call(d3.axisLeft(yScale))
    .selectAll('text')
    .style('font-weight', 'bold')
    .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim());

  // Add x-axis label
  g.append('text')
    .attr('x', innerWidth / 2)
    .attr('y', innerHeight + 40)
    .attr('text-anchor', 'middle')
    .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim())
    .text('Amino Acid Position');

  // Add y-axis label
  g.append('text')
    .attr('transform', 'rotate(-90)')
    .attr('x', -innerHeight / 2)
    .attr('y', -60)
    .attr('text-anchor', 'middle')
    .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim())
    .text('Gene');

  // Draw gene segments
  genes.forEach(gene => {
    const geneGroup = g.append('g');

    // Draw the gene backbone
    const geneStart = d3.min(geneGroups[gene], d => d.position) - 10;
    const geneEnd = d3.max(geneGroups[gene], d => d.position) + 10;

    geneGroup.append('line')
      .attr('x1', xScale(geneStart))
      .attr('x2', xScale(geneEnd))
      .attr('y1', yScale(gene) + yScale.bandwidth() / 2)
      .attr('y2', yScale(gene) + yScale.bandwidth() / 2)
      .attr('stroke', geneColors[gene] || '#ccc')
      .attr('stroke-width', 4)
      .attr('opacity', 0.6);

    // Draw mutation points
    geneGroups[gene].forEach(mutation => {
      const mutationGroup = geneGroup.append('g')
        .attr('class', 'mutation')
        .attr('transform', `translate(${xScale(mutation.position)}, ${yScale(gene) + yScale.bandwidth() / 2})`)
        .style('cursor', 'pointer')
        .on('mouseover', function(event) {
          // Show tooltip
          const tooltip = d3.select('#mutation-viz')
            .append('div')
            .attr('class', 'mutation-tooltip')
            .style('position', 'absolute')
            .style('background-color', 'rgba(255, 255, 255, 0.9)')
            .style('border', '1px solid #ddd')
            .style('border-radius', '4px')
            .style('padding', '8px')
            .style('box-shadow', '0 2px 5px rgba(0, 0, 0, 0.2)')
            .style('pointer-events', 'none')
            .style('z-index', '10')
            .style('left', `${event.pageX}px`)
            .style('top', `${event.pageY - 70}px`);

          tooltip.html(`
            <strong>${mutation.gene}:${mutation.original}${mutation.position}${mutation.mutation}</strong><br>
            <span>Change: ${mutation.original} → ${mutation.mutation}</span><br>
            <span>Effect: ${mutation.effect}</span>
          `);
        })
        .on('mouseout', function() {
          // Remove tooltip
          d3.select('.mutation-tooltip').remove();
        });

      // Draw mutation circle
      mutationGroup.append('circle')
        .attr('r', 7)
        .attr('fill', geneColors[gene] || '#ccc');

      // Draw mutation text (amino acid change)
      mutationGroup.append('text')
        .attr('x', 0)
        .attr('y', -12)
        .attr('text-anchor', 'middle')
        .style('font-size', '10px')
        .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim())
        .text(`${mutation.original}→${mutation.mutation}`);
    });
  });

  // Add a legend
  const legend = svg.append('g')
    .attr('transform', `translate(${width - margin.right - 100}, ${margin.top})`);

  Object.keys(geneColors).filter(gene => genes.includes(gene)).forEach((gene, i) => {
    legend.append('rect')
      .attr('x', 0)
      .attr('y', i * 20)
      .attr('width', 15)
      .attr('height', 15)
      .attr('fill', geneColors[gene]);

    legend.append('text')
      .attr('x', 20)
      .attr('y', i * 20 + 12)
      .style('font-size', '12px')
      .style('fill', getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim())
      .text(gene);
  });
}

// Initialize predictions data
function initPredictionsData() {
  // For demo purposes, we'll use placeholder data
  // In a real implementation, this would fetch prediction data from an API

  // Initialize the projection chart
  createProjectionChart();

  // Initialize risk matrix placeholder
  initRiskMatrix();

  // Initialize prediction map
  const predictionMap = document.getElementById('prediction-map');
  if (predictionMap) {
    // Small timeout to ensure DOM is fully ready
    setTimeout(() => {
      initPredictionMap(predictionMap);
    }, 100);
  }
}

// Create the projection chart in predictions section
function createProjectionChart() {
  const ctx = document.getElementById('projection-chart').getContext('2d');

  // Sample data for the projection
  const labels = [];
  const actualData = [];
  const projectedData = [];

  // Generate 30 days of data (15 past, 15 future)
  const today = new Date();
  for (let i = -15; i < 15; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() + i);
    labels.push(`${date.getMonth() + 1}/${date.getDate()}`);

    if (i < 0) {
      actualData.push(Math.round(500 + Math.random() * 300 + i * 20));
      projectedData.push(null);
    } else {
      actualData.push(null);
      // Exponential growth for projection
      projectedData.push(Math.round(800 + Math.pow(1.1, i) * 100));
    }
  }

  // Get CSS variable colors for theming
  const textColor = getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim();
  const lightColor = getComputedStyle(document.documentElement).getPropertyValue('--light-color').trim();

  // Create the chart
  chartsInstances['projection-chart'] = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'Actual Cases',
          data: actualData,
          borderColor: '#3498db',
          backgroundColor: 'rgba(52, 152, 219, 0.1)',
          borderWidth: 2,
          tension: 0.4,
          fill: true
        },
        {
          label: 'Projected Cases',
          data: projectedData,
          borderColor: '#e74c3c',
          backgroundColor: 'rgba(231, 76, 60, 0.1)',
          borderWidth: 2,
          borderDash: [5, 5],
          tension: 0.4,
          fill: true
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      layout: {
        padding: {
          bottom: 10
        }
      },
      plugins: {
        legend: {
          position: 'top',
          labels: {
            boxWidth: 12,
            padding: 10,
            color: textColor || '#2c3e50'
          }
        },
        tooltip: {
          mode: 'index',
          intersect: false,
          backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--card-color').trim(),
          titleColor: textColor || '#2c3e50',
          bodyColor: textColor || '#2c3e50'
        }
      },
      scales: {
        x: {
          grid: {
            display: false
          },
          ticks: {
            color: textColor || '#2c3e50',
            maxRotation: 45,
            minRotation: 45,
            font: {
              size: 10
            }
          }
        },
        y: {
          beginAtZero: true,
          grid: {
            color: lightColor ? `${lightColor}33` : 'rgba(0, 0, 0, 0.05)'
          },
          ticks: {
            color: textColor || '#2c3e50',
            font: {
              size: 10
            }
          }
        }
      }
    }
  });
}

// Initialize risk matrix with actual visualization
function initRiskMatrix() {
  const container = document.getElementById('risk-matrix');

  // Create risk matrix visualization
  const matrix = document.createElement('div');
  matrix.className = 'risk-matrix-grid';

  // Define risk levels and colors
  const riskLevels = [
    { level: 'Very High', color: '#c0392b' },
    { level: 'High', color: '#e74c3c' },
    { level: 'Medium', color: '#f39c12' },
    { level: 'Low', color: '#2ecc71' },
    { level: 'Very Low', color: '#27ae60' }
  ];

  // Create matrix grid cells (5x5)
  for (let i = 0; i < 5; i++) {
    for (let j = 0; j < 5; j++) {
      const cell = document.createElement('div');
      cell.className = 'risk-cell';

      // Calculate risk level based on position
      // Bottom left is lowest risk, top right is highest
      const riskIndex = Math.min(4, Math.floor((i + j) / 2));
      const risk = riskLevels[4 - riskIndex];

      cell.style.backgroundColor = risk.color;
      cell.style.opacity = 0.6 + (riskIndex * 0.1); // Increase opacity for higher risk

      // Add disease markers based on their risk profiles
      const activePredictionBtn = document.querySelector('.prediction-btn.active');
      const currentDisease = activePredictionBtn ? activePredictionBtn.getAttribute('data-disease') : 'mpox-2024';

      if ((currentDisease === 'h5n1-2024' && i === 4 && j === 4) ||
          (currentDisease === 'ebolavirus' && i === 4 && j === 3)) {
        // Add marker for high-risk diseases
        const marker = document.createElement('div');
        marker.className = 'disease-marker';
        marker.textContent = diseaseData[currentDisease].name.substring(0, 2);
        marker.title = diseaseData[currentDisease].name;
        cell.appendChild(marker);
      } else if ((currentDisease === 'mpox-2024' && i === 3 && j === 3) ||
                (currentDisease === 'dengue' && i === 3 && j === 2)) {
        // Add marker for medium-high risk diseases
        const marker = document.createElement('div');
        marker.className = 'disease-marker';
        marker.textContent = diseaseData[currentDisease].name.substring(0, 2);
        marker.title = diseaseData[currentDisease].name;
        cell.appendChild(marker);
      } else if ((currentDisease === 'sarscov2' && i === 2 && j === 2) ||
                (currentDisease === 'zika' && i === 1 && j === 2)) {
        // Add marker for medium to low risk diseases
        const marker = document.createElement('div');
        marker.className = 'disease-marker';
        marker.textContent = diseaseData[currentDisease].name.substring(0, 2);
        marker.title = diseaseData[currentDisease].name;
        cell.appendChild(marker);
      }

      matrix.appendChild(cell);
    }
  }

  // Add axis labels
  const axisContainer = document.createElement('div');
  axisContainer.className = 'risk-axis-container';

  // X axis (Transmissibility)
  const xAxis = document.createElement('div');
  xAxis.className = 'risk-x-axis';
  xAxis.innerHTML = '<span>Low</span><span>Transmissibility</span><span>High</span>';

  // Y axis (Severity)
  const yAxis = document.createElement('div');
  yAxis.className = 'risk-y-axis';
  yAxis.innerHTML = '<span>High</span><span>Severity</span><span>Low</span>';

  axisContainer.appendChild(xAxis);
  axisContainer.appendChild(matrix);
  axisContainer.appendChild(yAxis);

  // Legend
  const legend = document.createElement('div');
  legend.className = 'risk-legend';

  riskLevels.forEach(risk => {
    const item = document.createElement('div');
    item.className = 'legend-item';

    const colorBox = document.createElement('div');
    colorBox.className = 'legend-color';
    colorBox.style.backgroundColor = risk.color;

    const label = document.createElement('span');
    label.textContent = risk.level;

    item.appendChild(colorBox);
    item.appendChild(label);
    legend.appendChild(item);
  });

  // Clear and append all elements
  container.innerHTML = '';
  container.appendChild(axisContainer);
  container.appendChild(legend);
}

// Update prediction timeframe
function updatePredictionTimeframe(days) {
  console.log(`Updating prediction timeframe to ${days} days`);

  // Update the projection chart based on the selected timeframe
  updateProjectionChart(days);

  // Refresh prediction map with updated data
  const predictionMap = document.getElementById('prediction-map');
  if (predictionMap) {
    initPredictionMap(predictionMap);
  }
}

// Update prediction chart for different timeframes
function updateProjectionChart(days) {
  const ctx = document.getElementById('projection-chart').getContext('2d');
  const daysNum = parseInt(days, 10);

  if (isNaN(daysNum) || !chartsInstances['projection-chart']) {
    return;
  }

  // Get the current disease from the active prediction button
  const activePredictionBtn = document.querySelector('.prediction-btn.active');
  const currentDisease = activePredictionBtn ? activePredictionBtn.getAttribute('data-disease') : 'mpox-2024';

  // Generate new projection data based on timeframe
  const labels = [];
  const actualData = [];
  const projectedData = [];

  // Generate data (past days and future projection)
  const today = new Date();
  const pastDays = Math.floor(daysNum / 2);

  for (let i = -pastDays; i < daysNum; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() + i);
    labels.push(`${date.getMonth() + 1}/${date.getDate()}`);

    if (i < 0) {
      // Past data (actual)
      const baseline = getBaselineForDisease(currentDisease);
      actualData.push(Math.round(baseline + Math.random() * (baseline * 0.2) + i * (baseline * 0.01)));
      projectedData.push(null);
    } else {
      // Future data (projected)
      actualData.push(null);

      // Calculate growth factor based on disease
      const growthFactor = getGrowthFactorForDisease(currentDisease);
      const baseline = getBaselineForDisease(currentDisease);

      // Exponential growth model with disease-specific parameters
      projectedData.push(Math.round(baseline * Math.pow(growthFactor, i * (daysNum / 30))));
    }
  }

  // Update chart data
  chartsInstances['projection-chart'].data.labels = labels;
  chartsInstances['projection-chart'].data.datasets[0].data = actualData;
  chartsInstances['projection-chart'].data.datasets[1].data = projectedData;
  chartsInstances['projection-chart'].update();
}

// Helper function to get baseline cases for different diseases
function getBaselineForDisease(diseaseId) {
  const baselines = {
    'mpox-2024': 500,
    'h5n1-2024': 400,
    'sarscov2': 2000,
    'ebolavirus': 300,
    'dengue': 1500,
    'zika': 350
  };

  return baselines[diseaseId] || 500;
}

// Helper function to get growth factors for different diseases
function getGrowthFactorForDisease(diseaseId) {
  const growthFactors = {
    'mpox-2024': 1.08,
    'h5n1-2024': 1.12,
    'sarscov2': 1.06,
    'ebolavirus': 1.09,
    'dengue': 1.07,
    'zika': 1.05
  };

  return growthFactors[diseaseId] || 1.08;
}

// Update prediction disease
function updatePredictionDisease(diseaseId) {
  console.log(`Updating prediction disease to ${diseaseId}`);

  // Update current disease
  currentDisease = diseaseId;

  // Get the currently selected timeframe
  const activeTimeframeBtn = document.querySelector('.timeframe-btn.active');
  const days = activeTimeframeBtn ? activeTimeframeBtn.getAttribute('data-days') : '7';

  // Update the projection chart
  updateProjectionChart(days);

  // Update prediction metrics
  const hotspotData = {
    'mpox-2024': [
      { country: 'DR Congo', intensity: 0.9, growthRate: 1.4, coordinates: [21.7587, -4.0383] },
      { country: 'Nigeria', intensity: 0.8, growthRate: 1.3, coordinates: [8.6753, 9.0820] },
      { country: 'Ghana', intensity: 0.7, growthRate: 1.2, coordinates: [1.0232, 7.9465] },
      { country: 'UK', intensity: 0.6, growthRate: 1.1, coordinates: [-0.1278, 51.5074] },
      { country: 'Brazil', intensity: 0.5, growthRate: 1.2, coordinates: [-51.9253, -14.2350] }
    ],
    'h5n1-2024': [
      { country: 'USA', intensity: 0.9, growthRate: 1.6, coordinates: [-95.7129, 37.0902] },
      { country: 'Mexico', intensity: 0.8, growthRate: 1.5, coordinates: [-102.5528, 23.6345] },
      { country: 'China', intensity: 0.7, growthRate: 1.3, coordinates: [104.1954, 35.8617] },
      { country: 'Vietnam', intensity: 0.8, growthRate: 1.4, coordinates: [108.2772, 14.0583] },
      { country: 'Indonesia', intensity: 0.7, growthRate: 1.3, coordinates: [113.9213, -0.7893] }
    ],
    'sarscov2': [
      { country: 'India', intensity: 0.8, growthRate: 1.2, coordinates: [78.9629, 20.5937] },
      { country: 'USA', intensity: 0.7, growthRate: 1.1, coordinates: [-95.7129, 37.0902] },
      { country: 'Brazil', intensity: 0.7, growthRate: 1.3, coordinates: [-51.9253, -14.2350] },
      { country: 'China', intensity: 0.6, growthRate: 1.1, coordinates: [104.1954, 35.8617] },
      { country: 'Russia', intensity: 0.5, growthRate: 1.0, coordinates: [105.3188, 61.5240] }
    ],
    'ebolavirus': [
      { country: 'DR Congo', intensity: 0.9, growthRate: 1.5, coordinates: [21.7587, -4.0383] },
      { country: 'Uganda', intensity: 0.8, growthRate: 1.4, coordinates: [32.2903, 1.3733] },
      { country: 'Sierra Leone', intensity: 0.7, growthRate: 1.3, coordinates: [-11.7799, 8.4606] },
      { country: 'Guinea', intensity: 0.7, growthRate: 1.2, coordinates: [-9.6966, 9.9456] },
      { country: 'Liberia', intensity: 0.6, growthRate: 1.1, coordinates: [-9.4295, 6.4281] }
    ],
    'dengue': [
      { country: 'Brazil', intensity: 0.9, growthRate: 1.3, coordinates: [-51.9253, -14.2350] },
      { country: 'Philippines', intensity: 0.8, growthRate: 1.2, coordinates: [121.7740, 12.8797] },
      { country: 'India', intensity: 0.8, growthRate: 1.3, coordinates: [78.9629, 20.5937] },
      { country: 'Indonesia', intensity: 0.7, growthRate: 1.2, coordinates: [113.9213, -0.7893] },
      { country: 'Mexico', intensity: 0.6, growthRate: 1.1, coordinates: [-102.5528, 23.6345] }
    ],
    'zika': [
      { country: 'Brazil', intensity: 0.8, growthRate: 1.2, coordinates: [-51.9253, -14.2350] },
      { country: 'Colombia', intensity: 0.7, growthRate: 1.1, coordinates: [-74.2973, 4.5709] },
      { country: 'Mexico', intensity: 0.6, growthRate: 1.1, coordinates: [-102.5528, 23.6345] },
      { country: 'Puerto Rico', intensity: 0.6, growthRate: 1.0, coordinates: [-66.5901, 18.2208] },
      { country: 'Honduras', intensity: 0.5, growthRate: 1.0, coordinates: [-86.2419, 15.1998] }
    ]
  };

  // Update prediction metrics with the selected disease's data
  updatePredictionMetrics(hotspotData[diseaseId] || []);

  // Refresh the prediction map
  const predictionMap = document.getElementById('prediction-map');
  if (predictionMap) {
    initPredictionMap(predictionMap);
  }

  // Update the risk matrix
  initRiskMatrix();
}

// Initialize map visualizations
function initMapPlaceholders() {
  // Initialize world map on overview page
  initWorldMap();

  // We'll initialize the prediction map in initPredictionsData instead
  // This ensures it's properly initialized when the user visits the predictions section
}

// Function to add hotspots to the prediction map
function addHotspots(g, projection) {
  const activePredictionBtn = document.querySelector('.prediction-btn.active');
  const diseaseId = activePredictionBtn ? activePredictionBtn.getAttribute('data-disease') : 'mpox-2024';
  const disease = diseaseData[diseaseId];

  if (!disease) return;

  // Define hotspot data for each disease
  const hotspotData = {
    'mpox-2024': [
      { country: 'DR Congo', intensity: 0.9, growthRate: 1.4, coordinates: [21.7587, -4.0383] },
      { country: 'Nigeria', intensity: 0.8, growthRate: 1.3, coordinates: [8.6753, 9.0820] },
      { country: 'Ghana', intensity: 0.7, growthRate: 1.2, coordinates: [1.0232, 7.9465] },
      { country: 'UK', intensity: 0.6, growthRate: 1.1, coordinates: [-0.1278, 51.5074] },
      { country: 'Brazil', intensity: 0.5, growthRate: 1.2, coordinates: [-51.9253, -14.2350] }
    ],
    'h5n1-2024': [
      { country: 'USA', intensity: 0.9, growthRate: 1.6, coordinates: [-95.7129, 37.0902] },
      { country: 'Mexico', intensity: 0.8, growthRate: 1.5, coordinates: [-102.5528, 23.6345] },
      { country: 'China', intensity: 0.7, growthRate: 1.3, coordinates: [104.1954, 35.8617] },
      { country: 'Vietnam', intensity: 0.8, growthRate: 1.4, coordinates: [108.2772, 14.0583] },
      { country: 'Indonesia', intensity: 0.7, growthRate: 1.3, coordinates: [113.9213, -0.7893] }
    ],
    'sarscov2': [
      { country: 'India', intensity: 0.8, growthRate: 1.2, coordinates: [78.9629, 20.5937] },
      { country: 'USA', intensity: 0.7, growthRate: 1.1, coordinates: [-95.7129, 37.0902] },
      { country: 'Brazil', intensity: 0.7, growthRate: 1.3, coordinates: [-51.9253, -14.2350] },
      { country: 'China', intensity: 0.6, growthRate: 1.1, coordinates: [104.1954, 35.8617] },
      { country: 'Russia', intensity: 0.5, growthRate: 1.0, coordinates: [105.3188, 61.5240] }
    ],
    'ebolavirus': [
      { country: 'DR Congo', intensity: 0.9, growthRate: 1.5, coordinates: [21.7587, -4.0383] },
      { country: 'Uganda', intensity: 0.8, growthRate: 1.4, coordinates: [32.2903, 1.3733] },
      { country: 'Sierra Leone', intensity: 0.7, growthRate: 1.3, coordinates: [-11.7799, 8.4606] },
      { country: 'Guinea', intensity: 0.7, growthRate: 1.2, coordinates: [-9.6966, 9.9456] },
      { country: 'Liberia', intensity: 0.6, growthRate: 1.1, coordinates: [-9.4295, 6.4281] }
    ],
    'dengue': [
      { country: 'Brazil', intensity: 0.9, growthRate: 1.3, coordinates: [-51.9253, -14.2350] },
      { country: 'Philippines', intensity: 0.8, growthRate: 1.2, coordinates: [121.7740, 12.8797] },
      { country: 'India', intensity: 0.8, growthRate: 1.3, coordinates: [78.9629, 20.5937] },
      { country: 'Indonesia', intensity: 0.7, growthRate: 1.2, coordinates: [113.9213, -0.7893] },
      { country: 'Mexico', intensity: 0.6, growthRate: 1.1, coordinates: [-102.5528, 23.6345] }
    ],
    'zika': [
      { country: 'Brazil', intensity: 0.8, growthRate: 1.2, coordinates: [-51.9253, -14.2350] },
      { country: 'Colombia', intensity: 0.7, growthRate: 1.1, coordinates: [-74.2973, 4.5709] },
      { country: 'Mexico', intensity: 0.6, growthRate: 1.1, coordinates: [-102.5528, 23.6345] },
      { country: 'Puerto Rico', intensity: 0.6, growthRate: 1.0, coordinates: [-66.5901, 18.2208] },
      { country: 'Honduras', intensity: 0.5, growthRate: 1.0, coordinates: [-86.2419, 15.1998] }
    ]
  };

  // Get hotspots for the current disease
  const hotspots = hotspotData[diseaseId] || [];

  // Disease-specific colors
  const diseaseColors = {
    'mpox-2024': '#8db4a3',
    'h5n1-2024': '#6498ac',
    'sarscov2': '#aeaac9',
    'ebolavirus': '#ecc188',
    'dengue': '#c57c80',
    'zika': '#3a97d3'
  };

  // Add hotspot indicators
  g.selectAll('.hotspot')
    .data(hotspots)
    .enter()
    .append('circle')
    .attr('class', 'hotspot')
    .attr('cx', d => {
      const proj = projection(d.coordinates);
      return proj ? proj[0] : 0;
    })
    .attr('cy', d => {
      const proj = projection(d.coordinates);
      return proj ? proj[1] : 0;
    })
    .attr('r', d => 20 * d.intensity) // Size based on intensity
    .attr('fill', diseaseColors[diseaseId] || '#3498db')
    .attr('fill-opacity', 0.3)
    .attr('stroke', diseaseColors[diseaseId] || '#3498db')
    .attr('stroke-width', 1)
    .attr('stroke-opacity', 0.7);

  // Add pulsating effect to represent growth
  g.selectAll('.hotspot')
    .data(hotspots)
    .enter()
    .append('circle')
    .attr('class', 'hotspot-pulse')
    .attr('cx', d => {
      const proj = projection(d.coordinates);
      return proj ? proj[0] : 0;
    })
    .attr('cy', d => {
      const proj = projection(d.coordinates);
      return proj ? proj[1] : 0;
    })
    .attr('r', 5)
    .attr('fill', diseaseColors[diseaseId] || '#3498db')
    .attr('fill-opacity', 0.7)
    .attr('stroke', 'white')
    .attr('stroke-width', 1)
    .on('mouseover', function(event, d) {
      // Show tooltip
      const tooltip = d3.select('#prediction-map')
        .append('div')
        .attr('class', 'prediction-tooltip')
        .style('position', 'absolute')
        .style('background-color', 'rgba(255, 255, 255, 0.95)')
        .style('border-left', `4px solid ${diseaseColors[diseaseId]}`)
        .style('border-radius', '4px')
        .style('padding', '10px')
        .style('box-shadow', '0 3px 8px rgba(0, 0, 0, 0.15)')
        .style('pointer-events', 'none')
        .style('z-index', '10')
        .style('font-family', "'Inter', sans-serif")
        .style('font-size', '13px')
        .style('transition', 'opacity 0.2s ease')
        .style('left', `${event.pageX - predictionMap.getBoundingClientRect().left + 15}px`)
        .style('top', `${event.pageY - predictionMap.getBoundingClientRect().top - 40}px`);

      tooltip.html(`
        <div style="font-weight: 600; margin-bottom: 4px; color: #333;">${d.country}</div>
        <div style="margin-top: 4px;">Risk Level: <span style="font-weight: 600;">${Math.round(d.intensity * 100)}%</span></div>
        <div style="margin-top: 4px;">Growth Rate: <span style="font-weight: 600;">${d.growthRate}x</span></div>
      `);
    })
    .on('mouseout', function() {
      // Remove tooltip
      d3.select('.prediction-tooltip').remove();
    });

  // Update metrics based on this data
  updatePredictionMetrics(hotspots);
}

// Update prediction metrics based on hotspot data
function updatePredictionMetrics(hotspots) {
  if (!hotspots || hotspots.length === 0) return;

  // Calculate metrics based on hotspot data
  const today = new Date();
  let peakDays = 30 + Math.floor(Math.random() * 30);

  // Find peak date based on most intense hotspot
  const maxIntensity = Math.max(...hotspots.map(h => h.intensity));
  const maxGrowthRate = Math.max(...hotspots.map(h => h.growthRate));

  // Adjust peak date based on growth rate - faster growing outbreaks peak sooner
  peakDays = Math.max(14, Math.floor(60 / maxGrowthRate));

  // Set peak date
  const peakDate = new Date(today);
  peakDate.setDate(peakDate.getDate() + peakDays);
  document.getElementById('peak-date').textContent = peakDate.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });

  // Calculate peak cases - higher intensity means more cases
  const baselineCases = 2500 + Math.floor(Math.random() * 2000);
  const peakCases = Math.floor(baselineCases * maxIntensity * maxGrowthRate);
  document.getElementById('peak-cases').textContent = `~${formatNumber(peakCases)}`;

  // Set growth rate from data
  document.getElementById('growth-rate').textContent = maxGrowthRate.toFixed(2);

  // Set confidence level - we could make this more sophisticated
  const confidence = 60 + Math.floor(maxIntensity * 25);
  document.getElementById('confidence').textContent = `${confidence}%`;
}

// Function to initialize the prediction map
function initPredictionMap(container) {
  // Clear previous content
  container.innerHTML = '';

  // Width and height for the map visualization
  const width = container.clientWidth;
  const height = 300;

  // Create SVG element
  const svg = d3.select(container)
    .append('svg')
    .attr('width', width)
    .attr('height', height)
    .attr('viewBox', `0 0 ${width} ${height}`)
    .attr('preserveAspectRatio', 'xMidYMid meet');

  // Create a group for the map
  const g = svg.append('g');

  // Define map projection - adjusted scale for better fit
  const projection = d3.geoEquirectangular()
    .scale(width / 6.5)
    .translate([width / 2, height / 2]);

  // Create path generator
  const path = d3.geoPath()
    .projection(projection);

  // Load world map data
  fetch('https://unpkg.com/world-atlas@2/countries-110m.json')
    .then(response => {
      if (!response.ok) {
        throw new Error(`Network response was not ok: ${response.status}`);
      }
      return response.json();
    })
    .then(world => {
      try {
        console.log("Prediction map data loaded successfully");

        // Convert TopoJSON to GeoJSON
        const countries = topojson.feature(world, world.objects.countries).features;

        // Draw countries
        g.selectAll('path')
          .data(countries)
          .enter()
          .append('path')
          .attr('class', 'country')
          .attr('d', path)
          .attr('fill', '#f0f0f0')
          .attr('stroke', '#ccc')
          .attr('stroke-width', 0.5);

        // Add hotspots for the selected disease
        addHotspots(g, projection);

        // Add zoom functionality
        const zoom = d3.zoom()
          .scaleExtent([0.7, 5])
          .on('zoom', (event) => {
            g.attr('transform', event.transform);
          });

        // Initialize with a slight zoom out to see the whole world
        svg.call(zoom)
           .call(zoom.transform, d3.zoomIdentity.scale(0.9).translate(width/10, height/10));

      } catch (err) {
        console.error("Error processing prediction map data:", err);
        container.innerHTML = `
          <div style="display: flex; height: 100%; align-items: center; justify-content: center; flex-direction: column; text-align: center;">
            <p style="margin-bottom: 10px;">Error loading prediction map</p>
            <p style="color: var(--text-light); font-size: 12px;">Failed to process map data</p>
          </div>
        `;
      }
    })
    .catch(error => {
      console.error('Error loading prediction map data:', error);
      container.innerHTML = `
        <div style="display: flex; height: 100%; align-items: center; justify-content: center; flex-direction: column; text-align: center;">
          <p style="margin-bottom: 10px;">Error loading prediction map</p>
          <p style="color: var(--text-light); font-size: 12px;">Unable to load the world map data</p>
        </div>
      `;
    });
}

// Initialize world map visualization
function initWorldMap() {
  const worldMapContainer = document.getElementById('world-map');
  const diseaseCheckboxesContainer = document.getElementById('map-disease-checkboxes');

  if (!worldMapContainer || !diseaseCheckboxesContainer) return;

  // Define disease colors with user-specified values
  const diseaseColors = {
    'mpox-2024': '#8db4a3',
    'h5n1-2024': '#6498ac',
    'sarscov2': '#aeaac9',
    'ebolavirus': '#ecc188',
    'dengue': '#c57c80',
    'zika': '#3a97d3'
  };

  // Selected diseases (all selected by default)
  let selectedDiseases = Object.keys(diseaseData);

  // Create disease selection checkboxes
  Object.keys(diseaseData).forEach(diseaseId => {
    const disease = diseaseData[diseaseId];
    const checkboxItem = document.createElement('div');
    checkboxItem.className = 'disease-checkbox-item';

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.id = `map-disease-${diseaseId}`;
    checkbox.value = diseaseId;
    checkbox.checked = true;

    checkbox.addEventListener('change', function() {
      if (this.checked) {
        if (!selectedDiseases.includes(diseaseId)) {
          selectedDiseases.push(diseaseId);
        }
      } else {
        selectedDiseases = selectedDiseases.filter(d => d !== diseaseId);
      }
      updateWorldMap();
    });

    const label = document.createElement('label');
    label.htmlFor = `map-disease-${diseaseId}`;

    const colorIndicator = document.createElement('span');
    colorIndicator.className = 'disease-color-indicator';
    colorIndicator.style.backgroundColor = diseaseColors[diseaseId] || '#cccccc';

    label.appendChild(colorIndicator);
    label.appendChild(document.createTextNode(disease.name));

    checkboxItem.appendChild(checkbox);
    checkboxItem.appendChild(label);

    diseaseCheckboxesContainer.appendChild(checkboxItem);
  });

  // Create the map using D3.js
  function updateWorldMap() {
    // Clear previous content
    worldMapContainer.innerHTML = '';

    if (selectedDiseases.length === 0) {
      worldMapContainer.innerHTML = `
        <div style="display: flex; height: 100%; align-items: center; justify-content: center; flex-direction: column; text-align: center;">
          <p style="margin-bottom: 10px;">No diseases selected</p>
          <p style="color: var(--text-light); font-size: 12px;">Select at least one disease to display on the map</p>
        </div>
      `;
      return;
    }

    // Show loading indicator
    worldMapContainer.innerHTML = `
      <div style="display: flex; height: 100%; align-items: center; justify-content: center;">
        <p>Loading map data...</p>
      </div>
    `;

    // Get dimensions
    const width = worldMapContainer.clientWidth;
    const height = worldMapContainer.clientHeight || 380; // Fallback height

    setTimeout(() => {
      // Clear loading indicator
      worldMapContainer.innerHTML = '';

      // Create SVG element
      const svg = d3.select('#world-map')
        .append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', `0 0 ${width} ${height}`)
        .attr('preserveAspectRatio', 'xMidYMid meet');

      // Create a group for the map
      const g = svg.append('g');

      // Define map projection - adjusted scale for better fit
      const projection = d3.geoEquirectangular()
        .scale(width / 6.5)
        .translate([width / 2, height / 2]);

      // Create path generator
      const path = d3.geoPath()
        .projection(projection);

      // Load world map data
      fetch('https://unpkg.com/world-atlas@2/countries-110m.json')
        .then(response => {
          if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status}`);
          }
          return response.json();
        })
        .then(world => {
          try {
            console.log("Map data loaded successfully");

            // Convert TopoJSON to GeoJSON
            const countries = topojson.feature(world, world.objects.countries).features;

            // Draw countries
            g.selectAll('path')
              .data(countries)
              .enter()
              .append('path')
              .attr('class', 'country')
              .attr('d', path)
              .attr('fill', '#f0f0f0')
              .attr('stroke', '#ccc')
              .attr('stroke-width', 0.5);

            // Create circles for each disease outbreak after map is drawn
            selectedDiseases.forEach(diseaseId => {
              const disease = diseaseData[diseaseId];
              if (!disease || !disease.countries) {
                console.warn(`No country data for disease: ${diseaseId}`);
                return;
              }

              const countries = Object.entries(disease.countries);

              // Prepare data for circles
              const circleData = countries.map(([countryName, cases]) => {
                // Get country coordinates
                const coordinates = getCountryCoordinates(countryName);
                if (!coordinates) {
                  console.warn(`No coordinates found for: ${countryName}`);
                  return null;
                }

                return {
                  countryName,
                  cases,
                  coordinates,
                  disease: disease.name,
                  color: diseaseColors[diseaseId] || '#cccccc',
                  diseaseId
                };
              }).filter(d => d !== null);

              console.log(`Adding ${circleData.length} circles for ${diseaseId}`);

              // Add circles to the map - ensure proper sizing
              g.selectAll(`.circle-${diseaseId}`)
                .data(circleData)
                .enter()
                .append('circle')
                .attr('class', `disease-circle disease-${diseaseId}`)
                .attr('cx', d => {
                  const proj = projection(d.coordinates);
                  return proj ? proj[0] : 0;
                })
                .attr('cy', d => {
                  const proj = projection(d.coordinates);
                  return proj ? proj[1] : 0;
                })
                .attr('r', d => {
                  // More reasonable sizing for circles
                  const baseSize = Math.log(d.cases) * 1.2;
                  return Math.max(3, Math.min(baseSize, 20)); // Min 3px, max 20px
                })
                .attr('fill', d => d.color)
                .attr('fill-opacity', 0.7)
                .attr('stroke', '#ffffff')
                .attr('stroke-width', 1)
                .attr('stroke-opacity', 0.7)
                .on('mouseover', function(event, d) {
                  // Highlight on hover
                  d3.select(this)
                    .attr('fill-opacity', 1)
                    .attr('r', d => {
                      const baseSize = Math.log(d.cases) * 1.2;
                      return Math.max(5, Math.min(baseSize + 2, 22));
                    });

                  // Add tooltip
                  const tooltip = d3.select('#world-map')
                    .append('div')
                    .attr('class', 'map-tooltip')
                    .style('position', 'absolute')
                    .style('background-color', 'rgba(255, 255, 255, 0.95)')
                    .style('border-left', `4px solid ${d.color}`)
                    .style('border-radius', '4px')
                    .style('padding', '10px')
                    .style('box-shadow', '0 3px 8px rgba(0, 0, 0, 0.15)')
                    .style('pointer-events', 'none')
                    .style('z-index', '10')
                    .style('font-family', "'Inter', sans-serif")
                    .style('font-size', '13px')
                    .style('transition', 'opacity 0.2s ease')
                    .style('left', `${event.pageX - worldMapContainer.getBoundingClientRect().left + 15}px`)
                    .style('top', `${event.pageY - worldMapContainer.getBoundingClientRect().top - 40}px`);

                  tooltip.html(`
                    <div style="font-weight: 600; margin-bottom: 4px; color: #333;">${d.countryName}</div>
                    <div style="color: ${d.color}; font-weight: 500;">${d.disease}</div>
                    <div style="margin-top: 4px;">Cases: <span style="font-weight: 600;">${formatNumber(d.cases)}</span></div>
                  `);
                })
                .on('mouseout', function() {
                  // Reset on mouseout
                  d3.select(this)
                    .attr('fill-opacity', 0.7)
                    .attr('r', d => {
                      const baseSize = Math.log(d.cases) * 1.2;
                      return Math.max(3, Math.min(baseSize, 20));
                    });

                  // Remove tooltip
                  d3.select('.map-tooltip').remove();
                });
            });

            // Add zoom functionality with limits and better initialization
            const zoom = d3.zoom()
              .scaleExtent([0.7, 5]) // Limit zoom out to see the whole world
              .on('zoom', (event) => {
                g.attr('transform', event.transform);
              });

            // Initialize with a slight zoom out to see the whole world
            svg.call(zoom)
               .call(zoom.transform, d3.zoomIdentity.scale(0.9).translate(width/10, height/10));

          } catch (err) {
            console.error("Error processing map data:", err);
            showMapError("Error processing map data");
          }
        })
        .catch(error => {
          console.error('Error loading world map data:', error);
          showMapError("Unable to load the world map data");
        });
    }, 100); // Short delay to ensure DOM is ready
  }

  function showMapError(message) {
    worldMapContainer.innerHTML = `
      <div style="display: flex; height: 100%; align-items: center; justify-content: center; flex-direction: column; text-align: center;">
        <p style="margin-bottom: 10px;">Error loading map</p>
        <p style="color: var(--text-light); font-size: 12px;">${message}</p>
      </div>
    `;
  }

  // Improved country coordinates function
  function getCountryCoordinates(country) {
    const coordinates = {
      'USA': [-95.7129, 37.0902],
      'United States': [-95.7129, 37.0902],
      'UK': [-0.1278, 51.5074],
      'Britain': [-0.1278, 51.5074],
      'Brazil': [-51.9253, -14.2350],
      'China': [104.1954, 35.8617],
      'India': [78.9629, 20.5937],
      'DR Congo': [21.7587, -4.0383],
      'Nigeria': [8.6753, 9.0820],
      'Vietnam': [108.2772, 14.0583],
      'Indonesia': [113.9213, -0.7893],
      'Russia': [105.3188, 61.5240],
      'Mexico': [-102.5528, 23.6345],
      'Philippines': [121.7740, 12.8797],
      'Colombia': [-74.2973, 4.5709],
      'Uganda': [32.2903, 1.3733],
      'Sierra Leone': [-11.7799, 8.4606],
      'Guinea': [-9.6966, 9.9456],
      'Liberia': [-9.4295, 6.4281],
      'France': [2.2137, 46.2276],
      'Germany': [10.4515, 51.1657],
      'Honduras': [-86.2419, 15.1998],
      'Puerto Rico': [-66.5901, 18.2208],
      'Others': [0, 0] // Default for unspecified countries
    };

    return coordinates[country] || null;
  }

  // Initialize map
  console.log("Initializing world map");
  updateWorldMap();

  // Handle window resize
  window.addEventListener('resize', () => {
    // Debounce resize to prevent too many redraws
    clearTimeout(window.resizeTimer);
    window.resizeTimer = setTimeout(() => {
      console.log("Resizing world map");
      updateWorldMap();
    }, 250);
  });
}

// Utility function to format numbers
function formatNumber(num) {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  } else {
    return num.toString();
  }
}


</script>