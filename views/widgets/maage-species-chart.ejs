<% var widgetId = 'maage-species-' + Math.random().toString(36).substr(2, 9); %>
<div class="grid-stack-item-content bg-white rounded-lg border border-maage-border shadow-sm p-4">
  <div class="chart-widget">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-medium text-maage-text-primary">Species Distribution</h3>
      <div class="flex gap-2">
        <button class="chart-toggle-btn px-3 py-1.5 bg-maage-primary-500 hover:bg-maage-primary-600 text-white rounded-md text-sm" data-view="chart">
          üç© Chart
        </button>
        <button class="chart-toggle-btn px-3 py-1.5 bg-maage-secondary-500 hover:bg-maage-secondary-600 text-white rounded-md text-sm" data-view="table">
          üìã Table
        </button>
      </div>
    </div>
    
    <div class="chart-container" style="width: 100%; height: 280px; position: relative;">
      <div class="chart-loading" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="text-center">
          <div class="animate-spin inline-block w-6 h-6 border-[3px] border-current border-t-transparent text-maage-primary-500 rounded-full mb-2"></div>
          <span class="text-maage-text-muted text-sm">Loading chart data...</span>
        </div>
      </div>
      <div class="chart-content" style="display: none; width: 100%; height: 100%;"></div>
      <div class="table-content" style="display: none; width: 100%; height: 100%; overflow: auto;">
        <table class="w-full">
          <thead>
            <tr class="border-b">
              <th class="text-left p-2">Species</th>
              <th class="text-left p-2">Count</th>
            </tr>
          </thead>
          <tbody class="table-data"></tbody>
        </table>
      </div>
    </div>
  </div>
  
  <script>
    (function() {
      const container = document.currentScript.parentElement;
      const chartContainer = container.querySelector('.chart-content');
      const tableContainer = container.querySelector('.table-content');
      const loadingEl = container.querySelector('.chart-loading');
      const tableData = container.querySelector('.table-data');
      const toggleBtns = container.querySelectorAll('.chart-toggle-btn');
      
      let chart = null;
      let data = [];
      
      function initChart() {
        if (!window.echarts) return;
        
        chartContainer.style.display = 'block';
        chartContainer.style.width = '100%';
        chartContainer.style.height = '280px';
        
        setTimeout(function() {
          if (chartContainer.clientWidth > 0 && chartContainer.clientHeight > 0) {
            chart = echarts.init(chartContainer, 'maage');
            loadData();
          }
        }, 50);
      }
      
      function loadData() {
        // Try API first, fallback to sample data only if API fails
        if (window.maageSVC && window.maageSVC.initialized) {
          console.log('Species chart: Using live MAAGE API data');
        } else {
          console.log('Species chart: MAAGE API not available, using sample data');
          const sampleData = {
            'Influenza A': 42, 'SARS-CoV-2': 38, 'Salmonella': 35, 'E. coli': 29, 'Other': 18
          };
          processData(sampleData);
          return;
        }
        
        const query = '*:*&facet=true&facet.field=species&facet.mincount=1&rows=0';
        window.maageSVC.query('genome', query, {
          query_lang: 'solr',
          accept: 'application/solr+json'
        }).then(function(results) {
          if (results?.facet_counts?.facet_fields?.species) {
            processData(results.facet_counts.facet_fields.species);
          } else {
            const sampleData = {
              'Influenza A': 42, 'SARS-CoV-2': 38, 'Salmonella': 35, 'E. coli': 29, 'Other': 18
            };
            processData(sampleData);
          }
        }).catch(function() {
          const sampleData = {
            'Influenza A': 42, 'SARS-CoV-2': 38, 'Salmonella': 35, 'E. coli': 29, 'Other': 18
          };
          processData(sampleData);
        });
      }
      
      function processData(facets) {
        data = Object.entries(facets)
          .filter(([key]) => key && key !== 'null')
          .map(([key, count]) => ({ name: key, value: count }))
          .sort((a, b) => b.value - a.value)
          .slice(0, 8);
          
        if (data.length === 0) return;
        
        hideLoading();
        renderChart();
        renderTable();
        showChart();
      }
      
      function renderChart() {
        if (!chart || !data.length) return;
        
        chart.setOption({
          tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b}: {c} ({d}%)'
          },
          legend: {
            type: 'scroll',
            orient: 'vertical',
            right: 10,
            top: 20,
            bottom: 20,
            itemWidth: 14,
            itemHeight: 10,
            textStyle: {
              fontSize: 11,
              width: 80,
              overflow: 'truncate'
            }
          },
          series: [{
            name: 'Species',
            type: 'pie',
            radius: ['40%', '70%'],
            center: ['40%', '50%'],
            avoidLabelOverlap: true,
            itemStyle: {
              borderRadius: 4,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: { show: false },
            emphasis: {
              label: {
                show: true,
                fontSize: '12',
                fontWeight: 'bold'
              }
            },
            data: data.map(item => ({
              value: item.value,
              name: item.name
            }))
          }]
        });
      }
      
      function renderTable() {
        if (!data.length) return;
        tableData.innerHTML = data.map(item => 
          `<tr class="border-b"><td class="p-2">${item.name}</td><td class="p-2">${item.value}</td></tr>`
        ).join('');
      }
      
      function showChart() {
        loadingEl.style.display = 'none';
        chartContainer.style.display = 'block';
        tableContainer.style.display = 'none';
        if (chart) setTimeout(() => chart.resize(), 100);
      }
      
      function showTable() {
        chartContainer.style.display = 'none';
        tableContainer.style.display = 'block';
      }
      
      function hideLoading() {
        loadingEl.style.display = 'none';
      }
      
      toggleBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          this.dataset.view === 'chart' ? showChart() : showTable();
        });
      });
      
      function waitForGridStackAndInit() {
        if (container.closest('.grid-stack-item')?.offsetWidth > 0) {
          initChart();
        } else {
          setTimeout(waitForGridStackAndInit, 100);
        }
      }
      
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => setTimeout(waitForGridStackAndInit, 1000));
      } else {
        setTimeout(waitForGridStackAndInit, 1000);
      }
    })();
  </script>
</div>