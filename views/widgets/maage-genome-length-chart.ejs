<% var widgetId = 'maage-genome-length-' + Math.random().toString(36).substr(2, 9); %>
<div class="grid-stack-item-content bg-white rounded-lg border border-maage-border shadow-sm p-4">
  <div class="chart-widget">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-medium text-maage-text-primary">Genome Length Distribution</h3>
      <div class="flex gap-2">
        <button class="chart-toggle-btn px-3 py-1.5 bg-maage-primary-500 hover:bg-maage-primary-600 text-white rounded-md text-sm" data-view="chart">
          ðŸ“Š Chart
        </button>
        <button class="chart-toggle-btn px-3 py-1.5 bg-maage-secondary-500 hover:bg-maage-secondary-600 text-white rounded-md text-sm" data-view="table">
          ðŸ“‹ Table
        </button>
      </div>
    </div>
    
    <div class="chart-container" style="width: 100%; height: 280px; position: relative;">
      <div class="chart-loading" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="text-center">
          <div class="animate-spin inline-block w-6 h-6 border-[3px] border-current border-t-transparent text-maage-primary-500 rounded-full mb-2"></div>
          <span class="text-maage-text-muted text-sm">Loading chart data...</span>
        </div>
      </div>
      <div class="chart-content" style="display: none; width: 100%; height: 100%;"></div>
      <div class="table-content" style="display: none; width: 100%; height: 100%; overflow: auto;">
        <table class="w-full">
          <thead>
            <tr class="border-b">
              <th class="text-left p-2">Length Range</th>
              <th class="text-left p-2">Count</th>
            </tr>
          </thead>
          <tbody class="table-data"></tbody>
        </table>
      </div>
    </div>
  </div>
  
  <script>
    (function() {
      const container = document.currentScript.parentElement;
      const chartContainer = container.querySelector('.chart-content');
      const tableContainer = container.querySelector('.table-content');
      const loadingEl = container.querySelector('.chart-loading');
      const tableData = container.querySelector('.table-data');
      const toggleBtns = container.querySelectorAll('.chart-toggle-btn');
      
      let chart = null;
      let data = [];
      
      function initChart() {
        if (!window.echarts) return;
        
        chartContainer.style.display = 'block';
        chartContainer.style.width = '100%';
        chartContainer.style.height = '280px';
        
        setTimeout(function() {
          if (chartContainer.clientWidth > 0 && chartContainer.clientHeight > 0) {
            chart = echarts.init(chartContainer, 'maage');
            loadData();
          }
        }, 50);
      }
      
      function loadData() {
        // Try API first, use range query on genome_length field
        if (window.maageSVC && window.maageSVC.initialized) {
          console.log('Genome length chart: Using live MAAGE API data with range facets');
          loadGenomeLengthRanges();
        } else {
          console.log('Genome length chart: MAAGE API not available, using sample data');
          const sampleData = {
            '< 1 Mb': 15, '1-2 Mb': 25, '2-3 Mb': 35, '3-4 Mb': 40, '4-5 Mb': 28, '> 5 Mb': 12
          };
          processData(sampleData);
        }
      }
      
      function loadGenomeLengthRanges() {
        // Query for different genome length ranges using multiple queries
        const ranges = [
          {name: '< 1 Mb', query: 'genome_length:[0 TO 1000000}'},
          {name: '1-2 Mb', query: 'genome_length:[1000000 TO 2000000}'},
          {name: '2-3 Mb', query: 'genome_length:[2000000 TO 3000000}'},
          {name: '3-4 Mb', query: 'genome_length:[3000000 TO 4000000}'},
          {name: '4-5 Mb', query: 'genome_length:[4000000 TO 5000000}'},
          {name: '> 5 Mb', query: 'genome_length:[5000000 TO *]'}
        ];
        
        let completed = 0;
        const results = {};
        
        ranges.forEach(range => {
          window.maageSVC.query('genome', range.query + '&rows=0', {
            query_lang: 'solr',
            accept: 'application/solr+json'
          }).then(function(response) {
            results[range.name] = response?.response?.numFound || 0;
            completed++;
            if (completed === ranges.length) {
              processData(results);
            }
          }).catch(function(error) {
            console.warn('Genome length range query failed:', range.name, error);
            results[range.name] = 0;
            completed++;
            if (completed === ranges.length) {
              processData(results);
            }
          });
        });
      }
      
      function processData(facets) {
        data = Object.entries(facets)
          .filter(([key]) => key && key !== 'null')
          .map(([key, count]) => ({ name: key, value: count }))
          .sort((a, b) => {
            // Custom sort for size ranges
            const order = ['< 1 Mb', '1-2 Mb', '2-3 Mb', '3-4 Mb', '4-5 Mb', '> 5 Mb'];
            return order.indexOf(a.name) - order.indexOf(b.name);
          });
          
        if (data.length === 0) return;
        
        hideLoading();
        renderChart();
        renderTable();
        showChart();
      }
      
      function renderChart() {
        if (!chart || !data.length) return;
        
        const names = data.map(item => item.name);
        const values = data.map(item => item.value);
        
        chart.setOption({
          tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } },
          grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },
          xAxis: { 
            type: 'category', 
            data: names,
            axisLabel: {
              rotate: 45,
              formatter: value => value.length > 8 ? value.substring(0, 6) + '...' : value
            }
          },
          yAxis: { type: 'value' },
          series: [{
            name: 'Count',
            type: 'bar',
            data: values,
            itemStyle: { 
              color: '#10b981',
              borderRadius: [4, 4, 0, 0]
            }
          }]
        });
      }
      
      function renderTable() {
        if (!data.length) return;
        tableData.innerHTML = data.map(item => 
          `<tr class="border-b"><td class="p-2">${item.name}</td><td class="p-2">${item.value}</td></tr>`
        ).join('');
      }
      
      function showChart() {
        loadingEl.style.display = 'none';
        chartContainer.style.display = 'block';
        tableContainer.style.display = 'none';
        if (chart) setTimeout(() => chart.resize(), 100);
      }
      
      function showTable() {
        chartContainer.style.display = 'none';
        tableContainer.style.display = 'block';
      }
      
      function hideLoading() {
        loadingEl.style.display = 'none';
      }
      
      toggleBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          this.dataset.view === 'chart' ? showChart() : showTable();
        });
      });
      
      function waitForGridStackAndInit() {
        if (container.closest('.grid-stack-item')?.offsetWidth > 0) {
          initChart();
        } else {
          setTimeout(waitForGridStackAndInit, 100);
        }
      }
      
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => setTimeout(waitForGridStackAndInit, 1000));
      } else {
        setTimeout(waitForGridStackAndInit, 1000);
      }
    })();
  </script>
</div>